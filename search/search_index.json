{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6587\u6863\u4ecb\u7ecd","text":"<p>\u672c\u6587\u6863\u662f\u6e05\u534e\u5927\u5b66\u8ba1\u7b97\u673a\u7cfb\u5b66\u751f\u79d1\u534f\u667a\u80fd\u4f53\u90e8\u7ec4\u7ec7\u7684\u667a\u80fd\u4f53\u5927\u8d5b(\u4e0b\u7b80\u79f0\u201c\u667a\u80fd\u4f53\u5927\u8d5b\u201d)\u7684\u5f00\u53d1\u5f15\u5bfc\u6587\u6863\u3002\u667a\u80fd\u4f53\u5927\u8d5b\u4f7f\u7528\u7684\u5e73\u53f0\u4e3a\u81ea\u884c\u5f00\u53d1\u7684saiblo\u5e73\u53f0\u3002\u672c\u6587\u6863\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5f00\u53d1\u4e00\u4e2a\u80fd\u591f\u8fd0\u884c\u5728saiblo\u5e73\u53f0\u4e0a\u7684\u53c2\u8d5bAI\u3002</p>"},{"location":"#_2","title":"\u6587\u6863\u7ed3\u6784","text":"<p>\u672c\u6587\u6863\u5305\u542b\u4ee5\u4e0b\u90e8\u5206\u5185\u5bb9:</p> <ol> <li>\u5e73\u53f0\u4ecb\u7ecd: \u672c\u90e8\u5206\u4ecb\u7ecd\u4e86AI\u4e0e\u5e73\u53f0\u7684\u4ea4\u4e92\u6d41\u7a0b</li> <li>sdk\u7ed3\u6784: \u672c\u90e8\u5206\u4ecb\u7ecd\u4e86\u8d5b\u4e8b\u65b9\u63d0\u4f9b\u7684sdk\u7684\u9879\u76ee\u7ed3\u6784</li> <li>\u64ad\u653e\u5668\u4f7f\u7528\u8bf4\u660e: \u672c\u90e8\u5206\u4e3a\u5e73\u53f0\u4e2d\u5404\u6e38\u620f\u4e3a\u9009\u624b\u63d0\u4f9b\u7684\u56fe\u5f62\u754c\u9762\u64ad\u653e\u5668\u7684\u4f7f\u7528\u8bf4\u660e</li> <li>\u5f00\u53d1\u5f15\u5bfc: \u672c\u90e8\u5206\u5c06\u5e26\u9886\u9009\u624b\u4f7f\u7528\u8d5b\u4e8b\u65b9\u63d0\u4f9b\u7684sdk\u5f00\u53d1\u4e00\u4e2a\u7b80\u6613\u7684AI</li> </ol>"},{"location":"platform/","title":"\u5e73\u53f0\u4f7f\u7528\u5bfc\u5f15","text":"<p>\u672c\u6587\u6863\u5c06\u8be6\u7ec6\u8bf4\u660eai\u5982\u4f55\u4e0e\u5e73\u53f0\u4ea4\u4e92\uff0c\u5e76\u4ecb\u7ecdAI\u7684\u901a\u5e38\u5b9e\u73b0\u65b9\u5f0f\u3002</p>"},{"location":"platform/#saiblo","title":"saiblo\u5e73\u53f0\u7684\u4ea4\u4e92\u903b\u8f91","text":"<p>\u4e0b\u56fe\u5c55\u793a\u4e86saiblo\u5e73\u53f0\u7684\u7ed3\u6784: </p> <p>\u5728\u5bf9\u5c40\u8fc7\u7a0b\u4e2d\uff0c\u5e73\u53f0\u5411\u9009\u624bAI\u66b4\u9732\u7684\u53ea\u6709\u88c1\u5224\u7a0b\u5e8f\u7684\u63a5\u53e3\u3002 \u88c1\u5224\u7a0b\u5e8f\u5728\u6bd4\u8d5b\u8fdb\u884c\u8fc7\u7a0b\u4e2d\u5c06\u901a\u8fc7\u6807\u51c6IO\u63a5\u6536\u9009\u624b\u53d1\u6765\u7684\u6d88\u606f\uff0c\u5e76\u5c06\u5176\u683c\u5f0f\u5316\u8f6c\u53d1\u7ed9\u903b\u8f91\u3002 \u5728\u903b\u8f91\u8fdb\u884c\u6bd4\u8d5b\u5224\u5b9a\u540e\uff0c\u5982\u679c\u6e38\u620f\u903b\u8f91\u5e0c\u671b\u5411\u9009\u624b\u8fd4\u56de\u6d88\u606f\uff0c\u5219\u6e38\u620f\u903b\u8f91\u5c06\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u8f6c\u53d1\u8be5\u6d88\u606f\u3002 \u88c1\u5224\u7a0b\u5e8f\u4f1a\u5c06\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u8fd4\u56de\u7684\u6d88\u606f\u683c\u5f0f\u5316\u540e\u901a\u8fc7\u6807\u51c6IO\u53d1\u7ed9\u9009\u624bAI\u3002</p> <p>\u5728\u6b64\u540c\u65f6\uff0c\u88c1\u5224\u7a0b\u5e8f\u5c06\u76d1\u63a7\u9009\u624bAI\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u5728\u9009\u624bAI\u8fd0\u884c\u72b6\u6001\u53d1\u751f\u6539\u53d8\u6216\u56de\u5408\u8fd0\u884c\u65f6\u95f4\u8d85\u8fc7\u8bbe\u5b9a\u503c\u65f6\u901a\u77e5\u6e38\u620f\u903b\u8f91\uff0c\u7531\u6e38\u620f\u903b\u8f91\u5224\u5b9a\u8fdb\u884c\u6e38\u620f\u72b6\u6001\u6539\u53d8\u6216\u7ec8\u6b62\u6e38\u620f\u3002</p> <ol> <li>judger \u5728\u542f\u52a8AI\u540e\uff0c\u5411\u6e38\u620f\u903b\u8f91\u53d1\u9001AI\u7684\u521d\u59cb\u5316\u4fe1\u606f\u3002\u5982\u903b\u8f91\u5224\u5b9aAI\u884c\u4e3a\u5f02\u5e38,\u5c06\u62a5\u544ajudger\u6e38\u620f\u7ed3\u675f\u3002</li> <li>judger \u548cAI\u5f00\u59cb\u4ea4\u4e92\uff0c\u4ea4\u4e92\u7c7b\u578b\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\uff1a<ul> <li>AI\u5411 judger \u53d1\u9001\u5404\u79cd\u6d88\u606f\uff0cjudger\u9700\u8981\u8fdb\u884c\u89e3\u6790\u4e0e\u5904\u7406\uff1b</li> <li>\u6e38\u620f\u903b\u8f91\u8bf7\u6c42judger\u76f4\u63a5\u5c06\u6d88\u606f\u8f6c\u53d1\u7ed9AI\uff1b</li> <li>judger \u5c06 AI \u53d1\u9001\u7684\u6d88\u606f\u5c01\u88c5\u540e\u8f6c\u53d1\u7ed9\u6e38\u620f\u903b\u8f91\uff1b</li> <li>judger \u5c06 AI \u7684\u5f02\u5e38\u60c5\u51b5\u62a5\u544a\u7ed9\u6e38\u620f\u903b\u8f91\u3002</li> </ul> </li> <li>\u5982\u6e38\u620f\u7ed3\u675f\uff0c\u6e38\u620f\u903b\u8f91\u5411 judger \u63d0\u4f9b\u73a9\u5bb6\u5f97\u5206\uff0c\u5e76\u62a5\u544a\u6e38\u620f\u7ed3\u675f\u3002</li> </ol>"},{"location":"platform/#_2","title":"\u901a\u4fe1\u534f\u8bae","text":"<p>\u7531\u4e8e\u5e73\u53f0\u6ca1\u6709\u9650\u5236\u9009\u624bAI\u4e0e\u88c1\u5224\u7a0b\u5e8f\u7684\u901a\u4fe1\u683c\u5f0f\uff0c\u901a\u4fe1\u534f\u8bae\u4f1a\u7531\u6e38\u620f\u5f00\u53d1\u8005\u89c4\u5b9a\u3002 \u9009\u624b\u9700\u8981\u9605\u8bfb\u6e38\u620f\u6587\u6863\u4e2d\u7684\u901a\u4fe1\u534f\u8bae\u89c4\u5b9a\uff0c\u5728\u5b9e\u73b0\u7684AI\u4e2d\u5c06\u64cd\u4f5c\u683c\u5f0f\u5316\u4e3a\u901a\u4fe1\u534f\u8bae\u89c4\u5b9a\u7684\u683c\u5f0f\u3002</p> <p>\u901a\u5e38\uff0c\u901a\u4fe1\u534f\u8bae\u5305\u542b\u4e86AI\u5411judger\u53d1\u9001\u81ea\u8eab\u64cd\u4f5c\u7684\u683c\u5f0f\uff0c\u4ee5\u53cajudger\u8f6c\u53d1\u7684\u6e38\u620f\u903b\u8f91\u53d1\u9001\u7684\u5bf9\u65b9\u64cd\u4f5c\u3001\u56de\u5408\u7ed3\u675f\u4fe1\u606f\u4ee5\u53ca\u53ef\u80fd\u5305\u542b\u7684\u5c40\u9762\u66f4\u65b0\u4fe1\u606f\u3002</p>"},{"location":"platform/#_3","title":"\u5178\u578b\u6837\u4f8b\uff1a\u731c\u6570\u5b57\u6e38\u620f","text":"<p>\u6e38\u620f\u903b\u8f91\u968f\u673a\u9009\u53d6\u4e00\u4e2a0\uff5e999\u4e2d\u7684\u6570\u3002\u4e24\u540d\u73a9\u5bb6\u4ea4\u66ff\u516c\u5f00\u731c\u6d4b\uff0c\u6e38\u620f\u903b\u8f91\u544a\u77e5\u53cc\u65b9\u662f\u5426\u731c\u4e2d\uff0c\u76f4\u5230\u4e00\u65b9\u731c\u4e2d\u8be5\u6570\u5b57\u3002\u731c\u4e2d\u7684\u73a9\u5bb6\u83b7\u80dc\u3002</p>"},{"location":"platform/#_4","title":"\u5178\u578b\u901a\u4fe1\u8fc7\u7a0b","text":"<p>\u4e00\u4e2a\u5178\u578b\u7684\u4e00\u5343\u4ee5\u5185\u731c\u6570\u5b57\u6e38\u620f\u901a\u4fe1\u534f\u8bae\u5982\u4e0b\uff1a <pre><code>\u6e38\u620f\u903b\u8f91\uff1a\n\u5728\u6e38\u620f\u5f00\u59cb\u65f6\u53d1\u9001\u4e00\u4e2a\u6570\u5b57\uff0c\u8be5\u6570\u5b57\u4e3a0\u62161\uff0c\u5982\u6536\u52300\u4ee3\u8868\u73a9\u5bb6\u4e3a\u5148\u624b\uff0c\u5426\u5219\u4e3a\u540e\u624b\uff1b\n\u4e4b\u540e\u6bcf\u56de\u5408\u53d1\u9001\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u8be5\u884c\u80fd\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u6574\u6570:\n    \u5982\u679c\u8be5\u7ed3\u679c\u4e3a\u81ea\u7136\u6570\u4ee3\u8868\u5bf9\u65b9\u6700\u8fd1\u4e00\u6b21\u731c\u6d4b\u7684\u6570\u5b57\uff1b\n    \u5982\u679c\u4e3a-1\u4ee3\u8868\u6211\u65b9\u731c\u4e2d\uff0c\u6e38\u620f\u7ed3\u675f\uff1b\n    \u5982\u679c\u4e3a-2\u4ee3\u8868\u5bf9\u65b9\u731c\u4e2d\uff0c\u6e38\u620f\u7ed3\u675f\uff1b\n\nAI\uff1a\n\u6bcf\u56de\u5408\u53d1\u9001\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u5e94\u80fd\u88ab\u89e3\u6790\u6210\u4e00\u4e2a\u81ea\u7136\u6570\uff0c\u4ee3\u8868\u8be5\u56de\u5408\u6211\u65b9\u731c\u7684\u6570\u5b57\u3002\n</code></pre></p> <p>\u5728\u8fd9\u4e2a\u901a\u4fe1\u534f\u8bae\u4e0b\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\uff1a <pre><code>\u521d\u59cb\u5316\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u521d\u59cb\u5316\u5b8c\u6bd5\uff0c\u751f\u6210\u7684\u968f\u673a\u6570\u4e3a114\uff1b\u53cc\u65b9AI\u521d\u59cb\u5316\u5b8c\u6bd5\u3002\n\n\u7b2c1\u56de\u5408\uff1a\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI0\u53d1\u9001 \"0\\n\" \uff0c\u5411AI1\u53d1\u9001 \"1\\n\"\uff1b\nAI0\u6536\u5230\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001\u7684\u6d88\u606f\uff0c\u968f\u540e\u5411\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001 \"514\\n\"\uff1b\n\u6e38\u620f\u903b\u8f91\u6536\u5230AI0\u6d88\u606f\uff0c\u968f\u540e\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI1\u53d1\u9001 \"514\\n\"\uff1b\nAI1\u6536\u5230\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001\u7684\u6d88\u606f\uff0c\u5e76\u5411\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001 \"250\\n\";\n\u6e38\u620f\u903b\u8f91\u6536\u5230AI1\u6d88\u606f\uff0c\u968f\u540e\u901a\u77e5\u88c1\u5224\u7a0b\u5e8f\u7b2c\u4e00\u56de\u5408\u7ed3\u675f\u3002\n\n\u7b2c2\u56de\u5408\uff1a\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI0\u53d1\u9001 \"250\\n\";\nAI0\u6536\u5230\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001\u7684\u6d88\u606f\uff0c\u5e76\u5411\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001 \"114\\n\"\uff1b\n\u6e38\u620f\u903b\u8f91\u6536\u5230AI0\u6d88\u606f\uff0c\u5224\u5b9a\u6e38\u620f\u7ed3\u675f\uff1b\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI0\u53d1\u9001 \"-1\\n\" \uff0c\u5411AI1\u53d1\u9001 \"-2\\n\"\uff1b\n\n\u7ed3\u675f\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u8fdb\u884c\u7ed3\u675f\u9636\u6bb5\u6e05\u7406\uff0c\u968f\u540e\u901a\u77e5\u88c1\u5224\u7a0b\u5e8f\u6e38\u620f\u7ed3\u675f\u5e76\u544a\u77e5\u6e38\u620f\u7ed3\u679c\u3002\n</code></pre></p> <p>\u4e00\u4e2a\u5178\u578b\u7684\u5f02\u5e38\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\uff1a <pre><code>\u521d\u59cb\u5316\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u521d\u59cb\u5316\u5b8c\u6bd5\uff0c\u751f\u6210\u7684\u968f\u673a\u6570\u4e3a114\uff1b\u53cc\u65b9AI\u8fdb\u884c\u521d\u59cb\u5316\uff0cAI0\u5f02\u5e38\u9000\u51fa\u3002\n\n\u7ed3\u675f\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI1\u53d1\u9001 \"-1\\n\"\uff1b\n\u6e38\u620f\u903b\u8f91\u8fdb\u884c\u7ed3\u675f\u9636\u6bb5\u6e05\u7406\uff0c\u968f\u540e\u901a\u77e5\u88c1\u5224\u7a0b\u5e8f\u6e38\u620f\u7ed3\u675f\u5e76\u544a\u77e5\u6e38\u620f\u7ed3\u679c\u3002\n</code></pre></p> <p>\u53e6\u4e00\u4e2a\u5178\u578b\u7684\u5f02\u5e38\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\uff1a <pre><code>\u521d\u59cb\u5316\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u521d\u59cb\u5316\u5b8c\u6bd5\uff0c\u751f\u6210\u7684\u968f\u673a\u6570\u4e3a114\uff1b\u53cc\u65b9AI\u521d\u59cb\u5316\u5b8c\u6bd5\u3002\n\n\u7b2c1\u56de\u5408\uff1a\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI0\u53d1\u9001 \"0\\n\" \uff0c\u5411AI1\u53d1\u9001 \"1\\n\"\uff1b\nAI0\u6536\u5230\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001\u7684\u6d88\u606f\uff0c\u968f\u540e\u5411\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001 \"514\\n\"\uff1b\n\u6e38\u620f\u903b\u8f91\u6536\u5230AI0\u6d88\u606f\uff0c\u968f\u540e\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI1\u53d1\u9001 \"514\\n\"\uff1b\nAI1\u6536\u5230\u88c1\u5224\u7a0b\u5e8f\u7684\u6d88\u606f\uff0c\u4f46\u89e6\u53d1\u4e86\u795e\u5947bug\uff0c\u8c03\u7528\u4e86sleep(114514)\uff1b\n\u88c1\u5224\u7a0b\u5e8f\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u672a\u6536\u5230AI1\u6d88\u606f\uff0c\u901a\u77e5\u6e38\u620f\u903b\u8f91\uff1b\n\u6e38\u620f\u903b\u8f91\u8bf7\u6c42\u88c1\u5224\u7a0b\u5e8f\u5411AI0\u53d1\u9001 \"-1\\n\" \uff0c\u5411AI1\u53d1\u9001 \"-2\\n\"\uff1b\n\n\u7ed3\u675f\u9636\u6bb5\uff1a\n\u6e38\u620f\u903b\u8f91\u8fdb\u884c\u7ed3\u675f\u9636\u6bb5\u6e05\u7406\uff0c\u968f\u540e\u901a\u77e5\u88c1\u5224\u7a0b\u5e8f\u6e38\u620f\u7ed3\u675f\u5e76\u544a\u77e5\u6e38\u620f\u7ed3\u679c\u3002\n</code></pre></p>"},{"location":"platform/#ai","title":"\u9009\u624bAI\u7684\u5b9e\u73b0","text":"<p>\u5728\u731c\u6570\u5b57\u6e38\u620f\u4e2d\uff0c\u4e00\u4e2a\u5178\u578b\u7684AI\u5b9e\u73b0\u5982\u4e0b\uff1a <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nint main(){\n    int my_seat, opposite_guess = 0;\n    int my_guess = 0, impossible[1000];\n    cin &gt;&gt; my_seat;\n    while(1){                               // \u6301\u7eed\u4ea4\u4e92\n        if(!my_seat){                       // \u5224\u65ad\u5148\u540e\u624b\n            while(impossible[my_guess])     // \u8fdb\u884c\u51b3\u7b56\n                ++my_guess;                 \n            cout &lt;&lt; my_guess &lt;&lt; \"\\n\";       // \u5411\u88c1\u5224\u7a0b\u5e8f\u53d1\u9001\u51b3\u7b56\n\n            cin &gt;&gt; opposite_guess;          // \u7b49\u5f85\u5bf9\u65b9\u64cd\u4f5c\n            if(opposite_guess &gt;= 0)         // \u66f4\u65b0\u5c40\u9762\n                impossible[opposite_guess] = 1;\n            else\n                return;\n        }\n        else{\n            cin &gt;&gt; opposite_guess;\n            if(opposite_guess &gt;= 0)\n                impossible[opposite_guess] = 1;\n            else\n                return;\n\n            while(impossible[my_guess])\n                ++my_guess;\n            cout &lt;&lt; my_guess &lt;&lt; \"\\n\";\n        }\n    }\n}\n</code></pre></p>"},{"location":"document/pacman/","title":"Rollman","text":""},{"location":"document/pacman/#_1","title":"\u4e00\u3001\u6e38\u620f\u80cc\u666f","text":"<ul> <li>\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u6211\u7684\u4eba\u751f\u53d8\u6210\u4e86\u4e00\u573a\u6e38\u620f\uff0c\u800c\u6211\u2014\u2014\u4e00\u540d\u666e\u901a\u5374\u53c8\u4e0d\u7518\u5e73\u5eb8\u7684\u5317\u4eac\u67d0\u5927\u5b66\u5b66\u751f\uff0c\u6210\u4e86\u6e38\u620f\u7684\u4e3b\u89d2\u3002\u00a0 \u00a0 </li> <li>\u521a\u8fdb\u5165\u8fd9\u4e2a\u201c\u5b66\u672f\u8ff7\u5bab\u201d\u65f6\uff0c\u6211\u8fd8\u4ee5\u4e3a\u81ea\u5df1\u5728\u505a\u68a6\u3002\u811a\u4e0b\u662f\u4e00\u6761\u873f\u8712\u7684\u5c0f\u8def\uff0c\u4e24\u65c1\u7684\u4e66\u67b6\u9ad8\u5f97\u4eff\u4f5b\u8981\u6491\u7834\u5929\u82b1\u677f\uff0c\u7a7a\u6c14\u4e2d\u98d8\u7740\u6d53\u6d53\u7684\u5496\u5561\u9999\u3002\u6211\u7684\u80cc\u5305\u91cc\u88c5\u6ee1\u4e86\u52c7\u6c14\u548c\u597d\u5947\u5fc3\uff0c\u524d\u65b9\u7684\u8def\u94fa\u6ee1\u4e86\u91d1\u707f\u707f\u7684\u77e5\u8bc6\u91d1\u5e01\uff0c\u6563\u53d1\u7740\u8bf1\u4eba\u7684\u5149\u8292\u3002\u91d1\u5e01\u7684\u95ea\u8000\u8ba9\u6211\u77ac\u95f4\u660e\u767d\uff1a\u6536\u96c6\u5b83\u4eec\u5c31\u662f\u6211\u7684\u4f7f\u547d\u2014\u2014\u5b83\u4eec\u8c61\u5f81\u7740\u6211\u5bf9\u4e16\u754c\u7684\u7406\u89e3\u548c\u6210\u957f\u7684\u6bcf\u4e00\u6b65\u3002</li> <li>\u4f46\u8fd9\u53ef\u4e0d\u662f\u4ec0\u4e48\u8f7b\u677e\u7684\u201c\u8dd1\u9177\u6e38\u620f\u201d\u3002\u5c31\u5728\u6211\u521a\u6361\u8d77\u7b2c\u4e00\u679a\u91d1\u5e01\u65f6\uff0c\u4e09\u4e2a\u5e7d\u7075\u7a81\u7136\u51fa\u73b0\uff0c\u5413\u5f97\u6211\u5dee\u70b9\u628a\u91d1\u5e01\u6254\u4e86\uff01\u4ed6\u4eec\u5206\u522b\u53eb\u201c\u8bfe\u4e1a\u201d\u3001\u201c\u79d1\u7814\u201d\u548c\u201c\u793e\u5de5\u201d\uff0c\u4e2a\u4e2a\u90fd\u4e0d\u662f\u597d\u60f9\u7684\u4e3b\u513f\u3002</li> <li>\u201c\u8bfe\u4e1a\u201d\u5e7d\u7075\u4e00\u624b\u62ff\u7740\u539a\u539a\u7684\u8bfe\u672c\uff0c\u4e00\u624b\u6325\u821e\u7740\u8bd5\u5377\uff0c\u773c\u795e\u7280\u5229\u5f97\u50cf\u80fd\u7a7f\u900f\u6211\u7684\u7075\u9b42\u3002\u4ed6\u603b\u662f\u5835\u5728\u8def\u7684\u4e2d\u95f4\uff0c\u51b7\u4e0d\u4e01\u5192\u51fa\u6765\u629b\u7ed9\u6211\u4e00\u9053\u5fae\u79ef\u5206\u96be\u9898\u6216\u8005\u4e00\u7bc7\u9700\u898148\u5c0f\u65f6\u5185\u5b8c\u6210\u7684\u8bba\u6587\u3002</li> <li>\u201c\u79d1\u7814\u201d\u5e7d\u7075\u5219\u66f4\u52a0\u72e1\u733e\u3002\u4ed6\u603b\u662f\u5728\u6211\u57cb\u5934\u4e13\u5fc3\u6536\u96c6\u91d1\u5e01\u65f6\u6084\u6084\u9760\u8fd1\uff0c\u7528\u4e00\u5806\u5b9e\u9a8c\u5931\u8d25\u7684\u6570\u636e\u6253\u51fb\u6211\u7684\u4fe1\u5fc3\u3002\u4ed6\u662f\u90a3\u79cd\u4f1a\u7528\u201c\u518d\u6765\u4e00\u904d\uff01\u201d\u4e0d\u65ad\u6298\u78e8\u4f60\u7684\u7c7b\u578b\u3002\u00a0 \u00a0 \u201c\u793e\u5de5\u201d\u5e7d\u7075\u770b\u4f3c\u4eba\u755c\u65e0\u5bb3\uff0c\u4f46\u5176\u5b9e\u662f\u4e2a\u9690\u85cf\u7684\u201c\u5927\u6740\u5668\u201d\u3002\u4ed6\u624b\u91cc\u62ce\u7740\u4e00\u5927\u5806\u793e\u56e2\u6d3b\u52a8\u901a\u77e5\uff0c\u5634\u91cc\u5ff5\u53e8\u7740\u201c\u5e73\u8861\u5b66\u4e60\u4e0e\u751f\u6d3b\u624d\u80fd\u6210\u4e3a\u5168\u80fd\u9009\u624b\uff01\u201d\u53ef\u662f\u4e00\u65e6\u7b54\u5e94\u4ed6\u7684\u9080\u8bf7\uff0c\u65f6\u95f4\u5c31\u50cf\u88ab\u5077\u8d70\u4e86\u4e00\u6837\uff0c\u5b66\u4e60\u65f6\u95f4\u4e5f\u968f\u4e4b\u6d88\u5931\u3002</li> <li>\u6211\u77e5\u9053\u4ed6\u4eec\u7684\u76ee\u7684\uff0c\u5c31\u662f\u4e3a\u4e86\u8ba9\u6211\u5728\u5b66\u672f\u8ff7\u5bab\u4e2d\u8ff7\u5931\u81ea\u6211\uff0c\u751a\u81f3\u9009\u62e9\u653e\u5f03\u3002\u4f46\u6211\u7edd\u4e0d\u670d\u8f93\uff01</li> <li>\u4e00\u5f00\u59cb\uff0c\u6211\u5bf9\u8fd9\u4e9b\u5e7d\u7075\u8fd8\u6709\u70b9\u513f\u5bb3\u6015\uff0c\u603b\u89c9\u5f97\u4ed6\u4eec\u968f\u65f6\u80fd\u628a\u6211\u201cGame Over\u201d\u3002\u4e0d\u8fc7\u968f\u7740\u6211\u6361\u5230\u7684\u91d1\u5e01\u8d8a\u6765\u8d8a\u591a\uff0c\u6211\u611f\u89c9\u81ea\u5df1\u53d8\u5f3a\u4e86\uff01\u91d1\u5e01\u7684\u5149\u8292\u4e0d\u4ec5\u70b9\u4eae\u4e86\u5468\u56f4\u7684\u8def\uff0c\u4e5f\u70b9\u71c3\u4e86\u6211\u7684\u81ea\u4fe1\u5fc3\u3002\u73b0\u5728\uff0c\u6211\u5b66\u4f1a\u4e86\u7528\u673a\u667a\u548c\u7075\u6d3b\u5e94\u5bf9\u6311\u6218\u3002</li> <li>\u6bcf\u5f53\u6211\u6536\u96c6\u591f\u4e00\u5b9a\u6570\u91cf\u7684\u91d1\u5e01\u65f6\uff0c\u524d\u65b9\u4f1a\u51fa\u73b0\u4e00\u6247\u95ea\u7740\u84dd\u5149\u7684\u4f20\u9001\u95e8\uff0c\u95e8\u5185\u662f\u901a\u5f80\u4e0b\u4e00\u5173\u7684\u672a\u77e5\u4e16\u754c\u3002\u6211\u603b\u4f1a\u5728\u95e8\u524d\u9a7b\u8db3\u7247\u523b\uff0c\u601d\u8003\u4e00\u4e2a\u201c\u7075\u9b42\u95ee\u9898\u201d\uff1a\u6211\u662f\u8be5\u7ee7\u7eed\u7559\u5728\u8fd9\u4e00\u5173\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u6536\u96c6\u77e5\u8bc6\u91d1\u5e01\uff0c\u8fd8\u662f\u5192\u9669\u8fdb\u5165\u4e0b\u4e00\u5173\uff0c\u8fce\u63a5\u65b0\u7684\u6311\u6218\uff1f\u00a0</li> <li>\u7559\u5728\u8fd9\u91cc\uff0c\u6211\u80fd\u66f4\u624e\u5b9e\u5730\u63d0\u5347\u80fd\u529b\uff0c\u4f46\u4e5f\u8981\u627f\u53d7\u5e7d\u7075\u4eec\u66f4\u6fc0\u70c8\u7684\u8ffd\u9010\uff1b\u7a7f\u8fc7\u4f20\u9001\u95e8\uff0c\u6211\u5c06\u8fce\u6765\u5168\u65b0\u7684\u673a\u4f1a\u548c\u98ce\u9669\uff0c\u751a\u81f3\u53ef\u80fd\u9047\u5230\u66f4\u5389\u5bb3\u7684\u5e7d\u7075\u3002\u8fd9\u79cd\u9009\u62e9\u5e76\u4e0d\u8f7b\u677e\uff0c\u53ef\u6bcf\u4e00\u6b21\u90fd\u8ba9\u6211\u66f4\u4e86\u89e3\u81ea\u5df1\u3002\u00a0 </li> <li>\u5b66\u672f\u8ff7\u5bab\u4e2d\u7684\u6bcf\u4e00\u5929\u90fd\u50cf\u662f\u548c\u81ea\u5df1\u7684\u4e00\u573a\u5bf9\u5f08\u3002\u5e7d\u7075\u662f\u6211\u9700\u8981\u9762\u5bf9\u7684\u6311\u6218\uff0c\u4f46\u771f\u6b63\u7684\u654c\u4eba\u4ece\u6765\u4e0d\u662f\u4ed6\u4eec\uff0c\u800c\u662f\u90a3\u4e9b\u8eb2\u5728\u89d2\u843d\u91cc\u7684\u61d2\u60f0\u548c\u9003\u907f\u3002\u6bcf\u4e00\u6b21\u6211\u6218\u80dc\u5e7d\u7075\u3001\u6536\u96c6\u91d1\u5e01\uff0c\u90fd\u662f\u5728\u7a81\u7834\u81ea\u6211\uff0c\u5411\u66f4\u4f18\u79c0\u7684\u81ea\u5df1\u9760\u8fd1\u3002\u00a0</li> <li>\u5982\u679c\u8fd9\u662f\u4e00\u573a\u6e38\u620f\uff0c\u90a3\u6211\u4e00\u5b9a\u8981\u505a\u5230\u901a\u5173\u4e3a\u6b62\u3002\u8c01\u8bf4\u6211\u4e0d\u80fd\u6210\u4e3a\u4e00\u4e2a\u5192\u9669\u5bb6\u5462\uff1f</li> </ul>"},{"location":"document/pacman/#_2","title":"\u4e8c\u3001\u573a\u666f\u8bbe\u7f6e","text":"<p>\u6bcf\u4e2a\u5173\u5361\u7684\u5730\u56fe\u5927\u5c0f\u5206\u522b\u4e3a 38\u00d738\u300129\u00d729 \u548c 18\u00d718\uff0c\u5730\u56fe\u4ee5\u5de6\u4e0b\u89d2\u4e3a(0,0)\u3002\u4f60\u5728\u6bcf\u4e00\u5173\u4e2d\u53ef\u884c\u8d70\u7684\u6b65\u6570\u662f\u6709\u9650\u7684\uff0c\u4e09\u4e2a\u5173\u5361\u7684\u6700\u5927\u6b65\u6570\u5206\u522b\u4e3a 500\u3001400\u3001300\uff0c\u5982\u679c\u8fbe\u5230\u6700\u5927\u6b65\u6570\uff0c\u5c06\u4f1a\u5f3a\u5236\u8fdb\u5165\u4e0b\u4e00\u5173\u3002</p> <p>\u4f60\u53ef\u4ee5\u62fe\u53d6\u62a4\u76fe\uff0c\u62a4\u76fe\u53ef\u4ee5\u62b5\u6321\u4e00\u6b21\u5e7d\u7075\u7684\u6293\u6355\u3002\u4f46\u662f\u5982\u679c\u88ab\u6293\u6355\u65f6\u6ca1\u6709\u62a4\u76fe\u5219\u4f1a\u88ab\u5e7d\u7075\u5403\u6389\uff0c\u7136\u540e\u91cd\u751f\u5728\u66fc\u54c8\u987f\u8ddd\u79bb\u610f\u4e49\u4e0a\u8ddd\u79bb\u5e7d\u7075\u8f83\u8fdc\u7684\u968f\u673a\u89d2\u843d\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u7684\u6240\u6709\u6280\u80fd\u90fd\u4f1a\u6e05\u7a7a\u3002\u4f60\u6ca1\u6709\u547d\u6570\u9650\u5236\uff0c\u4f46\u662f\u6bcf\u6b21\u88ab\u5403\u6389\u90fd\u4f1a\u6709\u4e00\u5b9a\u7684\u5206\u6570\u60e9\u7f5a\u3002</p> <p>\u573a\u666f\u5185\u5171\u6709\u516d\u79cd\u91d1\u5e01\uff0c\u5176\u4e2d\u9664\u666e\u901a\u7684\u77e5\u8bc6\u91d1\u5e01\u5916\u5176\u4f59\u7684\u7279\u6b8a\u9053\u5177\u6570\u91cf\u8f83\u5c11\uff1a</p> <ol> <li> <p>\u77e5\u8bc6\u91d1\u5e01\uff1a\u6bcf\u83b7\u5f97\u4e00\u4e2a\u52a0 1 \u5206\u3002</p> </li> <li> <p>\u53cc\u500d\u8363\u8000\u5e01\uff1a\u4ef7\u503c\u53cc\u500d\u7684\u91d1\u5e01\uff0c\u6bcf\u83b7\u5f97\u4e00\u4e2a\u52a0 2 \u5206\uff0c\u8ba9\u4f60\u5728\u77e5\u8bc6\u7684\u4e16\u754c\u4e2d\u5feb\u901f\u79ef\u7d2f\u66f4\u591a\u7684\u8d22\u5bcc\uff0c\u4e00\u6b21\u6210\u529f\u6536\u96c6\uff0c\u4fbf\u80fd\u7a81\u7834\u591a\u4e2a\u96be\u5173\u3002</p> </li> <li> <p>\u75be\u98ce\u4e4b\u7ffc\uff1a\u62e5\u6709\u5b83\uff0c\u5728\u63a5\u4e0b\u6765\u7684 10 \u6b65\u4e2d\uff0c\u4f60\u7684\u901f\u5ea6\u5c06\u53d8\u4e3a\u539f\u6765\u7684\u4e24\u500d\uff0c\u4f60\u5c06\u5982\u98ce\u822c\u8fc5\u901f\uff0c\u75be\u901f\u7a7f\u68ad\u5728\u5b66\u672f\u8ff7\u5bab\u4e2d\uff0c\u8fc5\u6377\u8eb2\u907f\u5e7d\u7075\u7684\u8ffd\u51fb\u3002</p> </li> <li> <p>\u667a\u5f15\u78c1\u77f3\uff1a\u62e5\u6709\u5b83\uff0c\u5728\u63a5\u4e0b\u6765\u7684 10 \u6b65\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5438\u5f15\u5230\u5468\u56f4 3*3 \u7684\u6240\u6709\u91d1\u5e01\u4e0e\u7279\u6b8a\u9053\u5177\uff0c\u8ba9\u4f60\u8f7b\u677e\u6536\u96c6\uff0c\u4eff\u4f5b\u4e00\u5757\u667a\u6167\u7684\u78c1\u94c1\u3002</p> </li> <li> <p>\u62a4\u5b66\u4e4b\u76fe\uff1a\u5728\u547d\u60ac\u4e00\u7ebf\u65f6\uff0c\u62a4\u5b66\u4e4b\u76fe\u5c06\u4e3a\u4f60\u62b5\u6321\u4e00\u6b21\u5e7d\u7075\u7684\u653b\u51fb\uff0c\u4fdd\u62a4\u4f60\u5728\u6700\u5371\u6025\u7684\u65f6\u523b\u5b89\u5168\u8131\u79bb\u56f0\u5883\u3002</p> </li> <li> <p>\u667a\u6167\u5723\u5178\uff1a\u4e00\u672c\u795e\u5947\u7684\u4e66\u7c4d\uff0c\u5f00\u542f\u667a\u6167\u7684\u4f20\u627f\uff0c\u62e5\u6709\u5b83\uff0c\u5728\u63a5\u4e0b\u6765\u7684 10 \u6b65\u4e2d\uff0c\u4f60\u83b7\u5f97\u7684\u5206\u6570\u5c06 x2\uff0c\u4f60\u5c06\u5feb\u901f\u514b\u670d\u8bfe\u4e1a\u3001\u79d1\u7814\u4e0e\u793e\u4ea4\u7684\u56f0\u6270\u3002</p> </li> <li> <p>\u5728\u7b2c\u4e00\u5173\u548c\u7b2c\u4e8c\u5173\u4e2d\uff0c\u5730\u56fe\u4e2d\u95f4\u533a\u57df\u5b58\u5728\u901a\u5f80\u4e0b\u4e00\u5173\u7684\u4f20\u9001\u95e8\u3002\u5f53\u4f60\u5728\u7b2c\u4e00\u5173\u884c\u8d70\u8d85\u8fc7 60 \u6b65\u4ee5\u53ca\u5728\u7b2c\u4e8c\u5173\u884c\u8d70\u8d85\u8fc7 50 \u6b65\u65f6\uff0c\u4f20\u9001\u95e8\u4f1a\u5f00\u542f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fdb\u5165\u4f20\u9001\u95e8\u6765\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u5173\u7684\u6311\u6218\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u5f53\u5e7d\u7075\u7ad9\u5728\u4f20\u9001\u95e8\u4e0a\u7684\u65f6\u5019\uff0c\u5377\u738b\u5e76\u4e0d\u80fd\u901a\u8fc7\u4f20\u9001\u95e8\u8fdb\u5165\u4e0b\u4e00\u5173\u3002</p> </li> </ol>"},{"location":"document/pacman/#_3","title":"\u4e09\u3001\u52a0\u5206\u89c4\u5219","text":""},{"location":"document/pacman/#_4","title":"\u5377\u738b","text":"<p>\u5982\u679c\u5377\u738b\u5728\u6ca1\u6709\u88ab\u5e7d\u7075\u6293\u4f4f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u547d\u8fde\u7eed\u83b7\u5f97 100 \u5206\uff0c\u5219\u4f1a\u83b7\u5f97\u989d\u5916\u7684 50 \u5206\u52a0\u5206\u3002</p> <p>\u5982\u679c\u5377\u738b\u628a\u672c\u5173\u5730\u56fe\u4e2d\u6240\u6709\u7684\u8c46\u5b50\u5168\u5403\u5b8c\u4e86\uff0c\u4f1a\u83b7\u5f97 50 \u5206\u7684\u52a0\u5206\u3002</p> <p>\u5982\u679c\u5377\u738b\u88ab\u5e7d\u7075\u5403\u6389\u4e86\u4e00\u6b21\uff0c\u4f1a\u88ab\u51cf\u6389 60 \u5206\u3002</p> <p>\u5982\u679c\u5377\u738b\u63d0\u524d\u901a\u5173\uff08\u5305\u62ec\u4f20\u9001\u95e8\u4f20\u9001\u6216\u8005\u5403\u6389\u6240\u6709\u8c46\u5b50\uff09\uff0c\u4f1a\u83b7\u5f97\u5927\u5c0f\u4e3a \\(\\lfloor(MaxRound(level) - CurrentRound) \\times 0.43\\rfloor\\) \u7684\u65f6\u95f4\u56e0\u5b50\u52a0\u5206\u3002</p>"},{"location":"document/pacman/#_5","title":"\u5e7d\u7075","text":"<p>\u5e7d\u7075\u6293\u4f4f\u5377\u738b\uff0c\u5219\u6293\u4f4f\u5377\u738b\u7684\u5e7d\u7075\u83b7\u5f97 50 \u5206\u7684\u52a0\u5206\u3002</p> <p>\u5e7d\u7075\u6467\u6bc1\u4e86\u5377\u738b\u7684\u62a4\u76fe\uff0c\u5219\u6467\u6bc1\u5377\u738b\u62a4\u76fe\u7684\u5e7d\u7075\u83b7\u5f97 10 \u5206\u7684\u52a0\u5206\u3002</p> <p>\u5e7d\u7075\u6bcf\u5403\u63895\u6b21\u5377\u738b\u65f6\uff08\u4e0d\u5305\u542b\u6467\u6bc1\u62a4\u76fe\uff09\uff0c\u6bcf\u4e2a\u5e7d\u7075\u90fd\u5c06\u83b7\u5f9720\u5206\u7684\u52a0\u5206\u3002</p> <p>\u5982\u679c\u5377\u738b\u6ca1\u6709\u5728\u672c\u5173\u7ed3\u675f\u524d\u5403\u6389\u672c\u5173\u6240\u6709\u7684\u8c46\u5b50\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5e7d\u7075\u90fd\u5c06\u83b7\u5f97 25 \u5206\u7684\u52a0\u5206\u3002</p> <p>\u64cd\u4f5c\u5e7d\u7075\u7684\u73a9\u5bb6\u7684\u6700\u7ec8\u5f97\u5206\u4e3a\u4e09\u4e2a\u5e7d\u7075\u7684\u5f97\u5206\u4e4b\u548c\u3002</p>"},{"location":"document/pacman/#_6","title":"\u5e7d\u7075\u6293\u4f4f\u5377\u738b\u7684\u5224\u5b9a","text":"<p>\u6bcf\u4e00\u8f6e\u4e2d\u5224\u65ad\u5e7d\u7075\u8d70\u8fc7\u7684\u8def\u5f84\u548c\u5377\u738b\u8d70\u8fc7\u7684\u8def\u5f84\uff08\u4e0d\u5305\u542b\u8d77\u70b9\uff0c\u5305\u542b\u7ec8\u70b9\uff09\uff0c\u82e5\u4e24\u8005\u7684\u8def\u5f84\u6709\u91cd\u5408\uff0c\u5219\u5224\u65ad\u4e3a\u5e7d\u7075\u548c\u5377\u738b\u5728\u6b64\u8f6e\u76f8\u9047\uff0c\u5373\u5e7d\u7075\u6293\u4f4f\u4e86\u5377\u738b\u3002</p>"},{"location":"document/pacman/#_7","title":"\u56db\u3001\u65f6\u95f4\u7a7a\u95f4\u9650\u5236","text":"<p>AI\u521d\u59cb\u5316\u9650\u5236\u8fd0\u884c\u65f6\u95f4 20s \uff0c\u64cd\u4f5c\u9650\u5236\u8fd0\u884c\u65f6\u95f4 1s \uff0c\u7a7a\u95f4 512MB \uff0c\u8d85\u8fc7\u9650\u5236\u76f4\u63a5\u5224\u8d1f\u3002</p>"},{"location":"document/pacman/#ai-sdk","title":"\u4e94\u3001AI SDK","text":"<p>Rollman SDK\u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/PacmanSDK-python</p> <p>\u5e7d\u7075 SDK\u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/GhostsSDK-python</p> <p>\u903b\u8f91\u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/PacmanLogic</p>"},{"location":"document/pacman/#_8","title":"\u516d\u3001\u901a\u4fe1\u534f\u8bae\u53ca\u6e38\u620f\u6d41\u7a0b","text":""},{"location":"document/pacman/#_9","title":"\u901a\u4fe1\u6d41\u7a0b","text":"<ul> <li>\u903b\u8f91\u7ed9\u53cc\u65b9\u53d1\u9001\u521d\u59cb\u5316\u4fe1\u606f</li> <li>\u903b\u8f91\u63a5\u6536\u5230\u5148\u624b\u73a9\u5bb6\u64cd\u4f5c</li> <li>\u903b\u8f91\u63a5\u6536\u5230\u540e\u624b\u73a9\u5bb6\u64cd\u4f5c</li> <li>\u7ed3\u7b97\u53cc\u65b9\u73a9\u5bb6\u64cd\u4f5c\u5e76\u66f4\u65b0\u6e38\u620f\u72b6\u6001</li> <li>\u5982\u679c\u4e2d\u9014\u6e38\u620f\u7ed3\u675f\uff0c\u5219\u5bf9\u5c40\u76f4\u63a5\u7ec8\u6b62</li> </ul>"},{"location":"document/pacman/#_10","title":"\u64cd\u4f5c\u7801","text":"\u64cd\u4f5c\u540d\u79f0 \u64cd\u4f5c\u7801 \u505c\u7559\u5728\u539f\u5730 0 \u5411\u4e0a\u79fb\u52a8 1 \u5411\u5de6\u79fb\u52a8 2 \u5411\u4e0b\u79fb\u52a8 3 \u5411\u53f3\u8fd0\u52a8 4"},{"location":"document/pacman/#_11","title":"\u521d\u59cb\u5316\u4fe1\u606f\u53ca\u56de\u653e\u6587\u4ef6\u683c\u5f0f","text":"<p>\u89c1\u901a\u4fe1\u6587\u6863</p>"},{"location":"document/pacman_api/","title":"\u901a\u4fe1\u6587\u6863","text":"<p>\u903b\u8f91\u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/PacmanLogic</p>"},{"location":"document/pacman_api/#-json","title":"\u7528\u6237-&gt;\u903b\u8f91\uff1ajson\u8f6c\u5316\u4e3a\u7684\u5b57\u7b26\u4e32","text":""},{"location":"document/pacman_api/#_2","title":"\u4f5c\u4e3a\u5377\u738b:","text":"<pre><code>{\n    \"role\": 0,\n    \"action\": \"action\"\n}\n</code></pre>"},{"location":"document/pacman_api/#_3","title":"\u4f5c\u4e3a\u5e7d\u7075:","text":"<p><pre><code>{\n    \"role\": 1,\n    \"action\": \"action1 action2 action3\"\n}\n</code></pre> action \u4e3a 0/1/2/3/4 \u5206\u522b\u8868\u793a \u4e0d\u52a8/\u4e0a/\u5de6/\u4e0b/\u53f3</p>"},{"location":"document/pacman_api/#-","title":"\u903b\u8f91-&gt;\u7528\u6237","text":"<p>\u540e\u7aef\u903b\u8f91\u4e2d\u7684\u4e00\u8f6e\uff08round\uff09\u5bf9\u5e94\u4e0ejudger\u901a\u4fe1\u4e2d\u7684\u4e09\u4e2a\u56de\u5408\uff08state\uff09</p> <p>\u7b2c0\u56de\u5408\uff08state\uff09\u53d1\u9001\u5ea7\u4f4d\u4fe1\u606f\uff1a\u54110\u53f7\u73a9\u5bb6\u53d1\u9001\u5b57\u7b26\u4e32<code>\"0\"</code>\uff0c\u54111\u53f7\u73a9\u5bb6\u53d1\u9001\u5b57\u7b26\u4e32<code>\"1\"</code></p> <p>\u6bcf\u8f6e\uff08round\uff09\u5f00\u59cb\u65f6\uff0c\u82e5\u6539\u53d8\u68cb\u76d8\u5219\u54110\u53f7\u73a9\u5bb6\u548c1\u53f7\u73a9\u5bb6\u53d1\u9001\u521d\u59cb\u5316\u4fe1\u606f\uff1a <pre><code>{\n    \"ghosts_coord\": [ghost.get_coord() for ghost in self._ghosts], # \u5e7d\u7075\u5750\u6807\n    \"pacman_coord\": self._pacman.get_coord(), # \u5377\u738b\u5750\u6807\n    \"score\": [self._pacman_score, self._ghosts_score], # \u53cc\u65b9\u5f97\u5206\n    \"level\": self._level, # \u5173\u5361\u53f7\n    \"board\": self._board.tolist(), # \u68cb\u76d8\uff0c\u4e3a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\n    \"beannumber\": beannum, # \u8c46\u5b50\u603b\u6570\n    \"portal_coord\": self._portal_coord, # \u4f20\u9001\u95e8\u4f4d\u7f6e\n}\n</code></pre></p> <p>\u6bcf\u4e00\u8f6e\uff08round\uff09\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff0c\u5bf9\u5e94\u4e09\u4e2a\u56de\u5408\uff08state\uff09</p> <p>\u9636\u6bb5\u4e00\uff1a\u8bfb\u51650\u53f7\u73a9\u5bb6\u53d1\u9001\u7684\u6d88\u606f\uff0c\u5e76\u7ed91\u53f7\u73a9\u5bb6\u53d1\u9001\u4fe1\u606f<code>\"player 0 send info\"</code></p> <p>\u9636\u6bb5\u4e8c\uff1a\u8bfb\u51651\u53f7\u73a9\u5bb6\u53d1\u9001\u7684\u6d88\u606f\uff0c\u5e76\u7ed90\u53f7\u73a9\u5bb6\u53d1\u9001\u4fe1\u606f<code>\"player 1 send info\"</code></p> <p>\u9636\u6bb5\u4e09\uff1a\u8c03\u7528step\u51fd\u6570\uff0c\u6267\u884c\u64cd\u4f5c</p> <p>\u6bcf\u5c40\u7ed3\u675f\u53d1\u7ed9ai\u7684\u4fe1\u606f\u4e3a\u64cd\u4f5c\u4fe1\u606f <pre><code>{\n    \"pacman_action\" : pacman.action[0], # \u4e00\u4e2a\u6570\uff0c\u4e3a\u5377\u738b\u7684\u64cd\u4f5c\n    \"ghosts_action\" : ghosts.action # \u4e00\u4e2a\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4e3a\u4e09\u4e2a\u5e7d\u7075\u7684\u64cd\u4f5c\n}\n</code></pre></p> <p>\u6bcf\u5c40\u7ed3\u675f\u53d1\u7ed9\u64ad\u653e\u5668\u7684\u4fe1\u606f\u4e3a\u589e\u91cf\u4fe1\u606f <pre><code>{\n    \"round\": self._round, # \u5f53\u524d\u56de\u5408\u7684\u8f6e\u6570\n    \"level\": self._level, # \u5f53\u524d\u56de\u5408\u6570\n    \"pacman_step_block\": self._pacman_step_block, # \u5377\u738b\u8d70\u8fc7\u7684\u8def\u5f84\n    \"pacman_coord\": self._pacman.get_coord(), # \u5377\u738b\u5750\u6807\n    \"pacman_skills\": self._last_skill_status, # \u5377\u738b\u6280\u80fd\n    \"ghosts_step_block\": self._ghosts_step_block, # \u5e7d\u7075\u8d70\u8fc7\u7684\u8def\u5f84\n    \"ghosts_coord\": [ghost.get_coord() for ghost in self._ghosts], # \u5e7d\u7075\u5750\u6807\n    \"score\": [self._pacman_score, self._ghosts_score], # \u5377\u738b\u548c\u5e7d\u7075\u7684\u5f97\u5206\n    \"events\": [i.value for i in self._event_list], # \u4e8b\u4ef6\n    \"portal_available\": self._portal_available, # \u4f20\u9001\u95e8\u662f\u5426\u5df2\u7ecf\u5f00\u542f\n    \"StopReason\": None,\n}\n</code></pre> event_list\u4e2d\u6570\u4e0e\u4e8b\u4ef6\u7684\u5bf9\u5e94\u5982\u4e0b\uff1a <pre><code>class Event(enum.Enum):\n    # 0 and 1 should not occur simutaneously\n    EATEN_BY_GHOST = 0 # when eaten by ghost, there are two events to be rendered. first, there should be a animation of pacman being caught by ghost. then, the game should pause for a while, and display a respawning animaiton after receiving next coord infomation.\n    SHEILD_DESTROYED = 1 \n    # 2 and 3 should not occur simutaneously\n    FINISH_LEVEL= 2\n    TIMEOUT = 3\n</code></pre></p> <p>\u6e38\u620f\u7ed3\u675f\u65f6\uff0c\u4f1a\u518d\u53d1\u9001\u4e00\u6b21\u4fe1\u606f\uff0c\u5176\u683c\u5f0f\u4e0e\u589e\u91cf\u4fe1\u606f\u7684\u683c\u5f0f\u76f8\u540c\uff0c\u4e0d\u8fc7\"StopReason\"\u5bf9\u5e94\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002</p>"},{"location":"instruction/pacman/","title":"Rollman\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u6587\u6863\u4e3aRollman\u7684\u5f00\u53d1\u6307\u5357\u3002\u672c\u6587\u6863\u57fa\u4e8e\u70ed\u8eab\u8d5bsdk\u8fdb\u884c\u5f00\u53d1\uff0csdk\u7684\u4f7f\u7528\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\u5f15\u5bfc\u6587\u6863sdk\u90e8\u5206\u7684\u5bf9\u5e94\u6587\u6863\u3002</p>"},{"location":"instruction/pacman/#stage1-ai","title":"stage1: \u5b9e\u73b0\u4e00\u4e2a\u80fd\u8fd0\u884c\u7684ai","text":""},{"location":"instruction/pacman/#rollman_1","title":"Rollman","text":"<p>\u6211\u4eec\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5728\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684agent\u3002</p> <p>\u6839\u636esdk\u7684\u6587\u6863\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2aai\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2aGameState\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u4e3a<code>[0, 4]</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u91c7\u6837\u5b9e\u73b0\u8be5\u51fd\u6570\uff1a <pre><code># ai.py\ndef ai_func(game_state: GameState):\n    \"\"\"\n    Args:\n        game_state (GameState): \u5f53\u524d\u7684\u6e38\u620f\u5c40\u9762\u5bf9\u8c61\n\n    Returns:\n        list: \u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u53f7\u7684\u6570\u7ec4\uff0c\u8303\u56f4\u5728[0, 4]\u4e4b\u95f4\n    \"\"\"\n    action = random.randint(0, 4)\n    return [action]\n</code></pre></p>"},{"location":"instruction/pacman/#_1","title":"\u5e7d\u7075","text":"<p>\u6211\u4eec\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5728\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684agent\u3002</p> <p>\u6839\u636esdk\u7684\u6587\u6863\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2aai\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2aGameState\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u5143\u7d20\u4e3a<code>[0, 4]</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u91c7\u6837\u5b9e\u73b0\u8be5\u51fd\u6570\uff1a <pre><code># ai.py\ndef ai(game_state: GameState):\n    \"\"\"\n    Args:\n        game_state (GameState): \u5f53\u524d\u7684\u6e38\u620f\u5c40\u9762\u5bf9\u8c61\n\n    Returns:\n        list: \u5305\u542b\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u53f7\u7684\u6570\u7ec4\uff0c\u8303\u56f4\u5728[0, 4]\u4e4b\u95f4\n    \"\"\"\n    action = [random.randint(0, 4) for _ in range(3)]\n    return action\n</code></pre> \u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u4e2a\u80fd\u8fd0\u884c\u7684ai\uff0c\u4f46\u662f\u5f88\u660e\u663e\u968f\u673a\u79fb\u52a8\u7684ai\u4e0d\u8db3\u4ee5\u53d6\u5f97\u597d\u7684\u6548\u679c\uff0c\u4e0b\u9762\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u6709\u7b56\u7565\u7684ai\u3002</p>"},{"location":"instruction/pacman/#stage2ai","title":"stage2\uff1a\u5b9e\u73b0\u4e00\u4e2a\u6709\u7b56\u7565\u7684ai","text":"<p>\u6211\u4eec\u5df2\u7ecf\u5728gamedata.py\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u5f88\u591a\u5c01\u88c5\u4e0e\u62bd\u8c61\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6765\u7b80\u5316\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u3002</p>"},{"location":"instruction/pacman/#rollman_2","title":"Rollman","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e\u72b6\u6001\u673a\u7684AI\u6765\u63a7\u5236\u5377\u738b\u3002\u8fd9\u4e2aAI\u4f1a\u6839\u636e\u5f53\u524d\u6e38\u620f\u5c40\u9762\uff0c\u52a8\u6001\u5207\u6362\u4e0d\u540c\u7684\u884c\u4e3a\u72b6\u6001\uff0c\u5e76\u4f7f\u7528\u8bc4\u5206\u51fd\u6570\u6765\u9009\u62e9\u6700\u4f18\u7684\u79fb\u52a8\u65b9\u5411\u3002</p> <p>\u4e3b\u8981\u7684\u72b6\u6001\u5305\u62ec:</p> <ul> <li>COLLECT: \u6536\u96c6\u666e\u901a\u8c46\u5b50\u6a21\u5f0f\uff0c\u5728\u5b89\u5168\u65f6\u4e3b\u52a8\u5bfb\u627e\u5e76\u5403\u6389\u666e\u901a\u8c46\u5b50</li> <li>ESCAPE: \u9003\u79bb\u5e7d\u7075\u6a21\u5f0f\uff0c\u5f53\u68c0\u6d4b\u5230\u9644\u8fd1\u6709\u5e7d\u7075\u5a01\u80c1\u65f6\uff0c\u4f18\u5148\u8003\u8651\u9003\u79bb </li> <li>BONUS: \u6536\u96c6\u7279\u6b8a\u8c46\u5b50\u6a21\u5f0f\uff0c\u53d1\u73b0\u9ad8\u4ef7\u503c\u7684\u7279\u6b8a\u9053\u5177\u65f6\u4f1a\u4f18\u5148\u83b7\u53d6</li> <li>GETOUT: \u9003\u79bb\u4f20\u9001\u95e8\u6a21\u5f0f\uff0c\u5728\u5408\u9002\u7684\u65f6\u673a\u901a\u8fc7\u4f20\u9001\u95e8\u8fdb\u5165\u4e0b\u4e00\u5173</li> </ul> <p>AI\u7684\u4e3b\u8981\u529f\u80fd\u5305\u62ec:</p> <ol> <li>\u72b6\u6001\u66f4\u65b0</li> <li>\u6839\u636e\u5e7d\u7075\u8ddd\u79bb\u3001\u7279\u6b8a\u8c46\u5b50\u4f4d\u7f6e\u3001\u62a4\u76fe\u72b6\u6001\u7b49\u56e0\u7d20\u52a8\u6001\u5207\u6362\u72b6\u6001</li> <li> <p>\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u4f7f\u7528\u4e0d\u540c\u7684\u8bc4\u5206\u6743\u91cd</p> </li> <li> <p>\u8def\u5f84\u89c4\u5212</p> </li> <li>\u4f7f\u7528A*\u7b97\u6cd5\u8fdb\u884c\u8def\u5f84\u641c\u7d22</li> <li> <p>\u8003\u8651\u5899\u58c1\u3001\u4f20\u9001\u95e8\u7b49\u969c\u788d\u7269</p> </li> <li> <p>\u4f4d\u7f6e\u8bc4\u4f30</p> </li> <li>\u8ba1\u7b97\u5e7d\u7075\u5a01\u80c1\u7a0b\u5ea6</li> <li>\u8bc4\u4f30\u5468\u56f4\u8c46\u5b50\u7684\u4ef7\u503c</li> <li>\u8003\u8651\u5386\u53f2\u8bbf\u95ee\u8bb0\u5f55\u907f\u514d\u91cd\u590d\u79fb\u52a8</li> <li> <p>\u6839\u636e\u5f53\u524d\u72b6\u6001\u8c03\u6574\u8bc4\u5206\u6743\u91cd</p> </li> <li> <p>\u79fb\u52a8\u51b3\u7b56</p> </li> <li>\u8bc4\u4f30\u6240\u6709\u53ef\u80fd\u7684\u79fb\u52a8\u65b9\u5411</li> <li>\u9009\u62e9\u8bc4\u5206\u6700\u9ad8\u7684\u79fb\u52a8\u65b9\u5411</li> <li>\u66f4\u65b0\u5386\u53f2\u8bb0\u5f55</li> </ol> <p>\u5b8c\u6574\u7684\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: <pre><code>from core.gamedata import *\nimport numpy as np\nfrom enum import Enum\nfrom collections import deque\n\nclass AIState(Enum):\n    COLLECT = \"COLLECT\"  # \u6536\u96c6\u666e\u901a\u8c46\u5b50\u6a21\u5f0f\n    ESCAPE = \"ESCAPE\"  # \u9003\u79bb\u5e7d\u7075\u6a21\u5f0f\n    BONUS = \"BONUS\"  # \u6536\u96c6\u7279\u6b8a\u8c46\u5b50\u6a21\u5f0f\n    GETOUT = \"GETOUT\"  # \u9003\u79bb\u4f20\u9001\u95e8\u6a21\u5f0f\n\nclass PacmanAI:\n    def __init__(self):\n        self.board_size = None\n        self.current_state = AIState.COLLECT\n        self.path = []\n        # \u5386\u53f2\u8bb0\u5f55\n        self.history = deque(maxlen=20)\n        self.init_bean_num = 0\n\n        # \u52a8\u6001\u53c2\u6570\n        self.GHOST_DANGER_DISTANCE = 5\n        self.BONUS_BEAN_PRIORITY = 2.0\n\n        # \u72b6\u6001\u6743\u91cd\n        self.weights = {\n            AIState.COLLECT: {\"ghost\": 1.0, \"bean\": 1.5, \"bonus\": 1.5},\n            AIState.ESCAPE: {\"ghost\": 3.0, \"bean\": 0.8, \"bonus\": 1.0},\n            AIState.BONUS: {\"ghost\": 0.8, \"bean\": 1.5, \"bonus\": 2.0},\n            AIState.GETOUT: {\"ghost\": 1, \"bean\": 1, \"bonus\": 1},\n        }\n\n        # \u7279\u6b8a\u8c46\u5b50\u4ef7\u503c\n        self.bean_values = {\n            3: 4.0,  # BONUS_BEAN\n            4: 3.0,  # SPEED_BEAN\n            5: 2.5,  # MAGNET_BEAN\n            6: 3.0,  # SHIELD_BEAN\n            7: 2.5,  # DOUBLE_BEAN\n        }\n\n    def count_remaining_bean(self, game_state: GameState):\n        \"\"\"\u8ba1\u7b97\u5269\u4f59\u8c46\u5b50\u6570\u91cf\"\"\"\n        cnt = 0\n        for i in range(game_state.board_size):\n            for j in range(game_state.board_size):\n                if game_state.board[i][j] in range(2, 8):\n                    cnt += 1\n\n        return cnt\n\n    def point_to_vector_projection_distance(self, point, vector_start, vector_end):\n        \"\"\"\u8ba1\u7b97\u70b9\u5230\u5411\u91cf\u7684\u6295\u5f71\u8ddd\u79bb\"\"\"\n        vector = vector_end - vector_start\n        point_vector = point - vector_start\n        vector_length = np.linalg.norm(vector)\n\n        if vector_length == 0:\n            return np.linalg.norm(point_vector)\n\n        vector_unit = vector / vector_length\n        projection_length = np.dot(point_vector, vector_unit)\n        projection_vector = vector_unit * projection_length\n        projection_point = vector_start + projection_vector\n        return np.linalg.norm(point - projection_point)\n\n    def can_getout_before_ghosts(self, game_state: GameState):\n        \"\"\"\u5224\u65ad\u662f\u5426\u80fd\u5728\u5e7d\u7075\u5230\u8fbe\u524d\u5230\u8fbe\u4f20\u9001\u95e8\"\"\"\n        pacman_pos = np.array(game_state.pacman_pos)\n        portal_pos = np.array(game_state.portal_coord)\n        ghosts_pos = np.array(game_state.ghosts_pos)\n\n        dist_to_portal = np.linalg.norm(pacman_pos - portal_pos)\n        ghosts_projection_dist_to_catch = [\n            self.point_to_vector_projection_distance(ghost_pos, pacman_pos, portal_pos)\n            for ghost_pos in ghosts_pos\n        ]\n\n        return dist_to_portal &lt; min(ghosts_projection_dist_to_catch) - 1\n\n    def manhattan_distance(self, pos1, pos2):\n        \"\"\"\u8ba1\u7b97\u66fc\u54c8\u987f\u8ddd\u79bb\"\"\"\n        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n\n    def update_state(self, game_state: GameState):\n        \"\"\"\u66f4\u65b0\u6e38\u620f\u72b6\u6001\"\"\"\n        pacman_pos = np.array(game_state.pacman_pos)\n        ghosts_pos = np.array(game_state.ghosts_pos)\n        # \u8ba1\u7b97\u5a01\u80c1\u7a0b\u5ea6\n        ghost_distances = [\n            len(\n                self.a_star_search(\n                    np.array(pacman_pos), np.array(ghost_pos), game_state\n                )\n            )\n            for ghost_pos in game_state.ghosts_pos\n        ]\n        min_ghost_distance = min(ghost_distances)\n        # \u5bfb\u627e\u7279\u6b8a\u8c46\u5b50\n        special_bean = self.find_nearest_special_bean(game_state)\n        # \u68c0\u67e5\u662f\u5426\u6709\u62a4\u76fe\u72b6\u6001\n        has_shield = game_state.pacman_skill_status[Skill.SHIELD.value] &gt; 0\n        # \u72b6\u6001\u673a\u8f6c\u6362\u903b\u8f91\n        if min_ghost_distance &lt; self.GHOST_DANGER_DISTANCE and not has_shield:\n            # \u5982\u679c\u53ef\u4ee5\u5728\u5e7d\u7075\u5230\u8fbe\u524d\u5230\u8fbe\u4f20\u9001\u95e8\uff0c\u4f18\u5148\u9009\u62e9GETOUT\n            if (\n                game_state.level &lt; 3\n                and self.can_getout_before_ghosts(game_state)\n                and game_state.portal_available\n                and self.count_remaining_bean(game_state) &lt; self.init_bean_num * 0.5\n            ):\n                self.current_state = AIState.GETOUT\n            else:\n                self.current_state = AIState.ESCAPE\n        elif (\n            game_state.level &lt; 3\n            and game_state.portal_available\n            and self.count_remaining_bean(game_state) &lt; self.init_bean_num * 0.5\n        ):\n            self.current_state = AIState.GETOUT\n        elif special_bean and special_bean[1] &lt; 8:\n            self.current_state = AIState.BONUS\n        else:\n            self.current_state = AIState.COLLECT\n\n    def find_nearest_special_bean(self, game_state):\n        \"\"\"\u5bfb\u627e\u6700\u8fd1\u7684\u7279\u6b8a\u8c46\u5b50\"\"\"\n        pacman_pos = np.array(game_state.pacman_pos)\n        special_beans = []\n\n        for i in range(game_state.board_size):\n            for j in range(game_state.board_size):\n                bean_type = game_state.board[i][j]\n                if bean_type &gt;= 3 and bean_type &lt;= 7:  # \u7279\u6b8a\u8c46\u5b50\n                    pos = np.array([i, j])\n                    dist = np.linalg.norm(pacman_pos - pos)\n                    value = self.bean_values[bean_type]\n                    score = value / (dist + 1)  # \u8003\u8651\u8ddd\u79bb\u548c\u4ef7\u503c\u7684\u7efc\u5408\u8bc4\u5206\n                    special_beans.append((pos, dist, score))\n\n        if special_beans:\n            # \u6309\u7efc\u5408\u8bc4\u5206\u6392\u5e8f\n            best_bean = max(special_beans, key=lambda x: x[2])\n            return (best_bean[0], best_bean[1])\n        return None\n\n    def a_star_search(self, start: np.ndarray, goal: np.ndarray, game_state: GameState):\n        \"\"\"A*\u641c\u7d22\u8def\u5f84\"\"\"\n        open_set = set()\n        open_set.add(tuple(start))\n        came_from = {}\n        g_score = {tuple(start): 0}\n        f_score = {tuple(start): self.manhattan_distance(start, goal)}\n\n        while open_set:\n            current = min(open_set, key=lambda x: f_score.get(x, float(\"inf\")))\n            if current == tuple(goal):\n                path = []\n                while current in came_from:\n                    path.append(current)\n                    current = came_from[current]\n                path.reverse()\n                return path\n\n            open_set.remove(current)\n            for direction, _ in self.get_valid_moves(list(current), game_state):\n                neighbor = tuple(direction)\n                tentative_g_score = g_score[current] + 1\n                if tentative_g_score &lt; g_score.get(neighbor, float(\"inf\")):\n                    came_from[neighbor] = current\n                    g_score[neighbor] = tentative_g_score\n                    f_score[neighbor] = tentative_g_score + self.manhattan_distance(\n                        neighbor, goal\n                    )\n                    if neighbor not in open_set:\n                        open_set.add(neighbor)\n\n        return []\n\n    def evaluate_position(self, pos, game_state):\n        \"\"\"\u8bc4\u4f30\u4f4d\u7f6e\u7684\u4ef7\u503c\"\"\"\n        pacman_pos = np.array(game_state.pacman_pos)\n        weights = self.weights[self.current_state]\n        ghost_distances = [\n            len(self.a_star_search(pos, np.array(ghost_pos), game_state))\n            for ghost_pos in game_state.ghosts_pos\n        ]\n        min_ghost_distance = min(ghost_distances)\n        ghost_score = (-4) * weights[\"ghost\"] / (min_ghost_distance + 1)\n\n        # \u8ba1\u7b97\u5468\u56f4\u8c46\u5b50\u7684\u4ef7\u503c\n        bean_value = 0\n        scan_range = 5\n        for dx in range(-scan_range, scan_range + 1):\n            for dy in range(-scan_range, scan_range + 1):\n                new_x, new_y = int(pos[0] + dx), int(pos[1] + dy)\n                if (\n                    0 &lt;= new_x &lt; game_state.board_size\n                    and 0 &lt;= new_y &lt; game_state.board_size\n                ):\n                    bean_type = game_state.board[new_x][new_y]\n                    if bean_type in BEANS_ITERATOR:  # \u6709\u8c46\u5b50\n                        distance = abs(dx) + abs(dy)\n                        if bean_type in SPECIAL_BEANS_ITERATOR:  # \u7279\u6b8a\u8c46\u5b50\n                            bean_value += self.bean_values[bean_type] / (distance + 1)\n                        elif bean_type == Space.REGULAR_BEAN.value:  # \u666e\u901a\u8c46\u5b50\n                            bean_value += 1 / (distance + 1)\n\n        # \u907f\u514d\u91cd\u590d\u8bbf\u95ee\n        pos_tuple = tuple(pos)\n        repeat_penalty = 0\n        visit_count = self.history.count(pos_tuple)\n        repeat_penalty = -8 * visit_count\n        final_score = ghost_score + bean_value * weights[\"bean\"] + repeat_penalty\n\n        # \u5982\u679c\u662f\u9003\u79bb\u6a21\u5f0f\uff0c\u786e\u4fdd\u8fdc\u79bb\u5e7d\u7075\n        if self.current_state == AIState.ESCAPE:\n            if min_ghost_distance &lt; self.GHOST_DANGER_DISTANCE:\n                final_score -= (self.GHOST_DANGER_DISTANCE - min_ghost_distance) * 10\n\n        # \u5982\u679c\u662fGETOUT\u6a21\u5f0f\uff0c\u786e\u4fdd\u5c3d\u5feb\u5230\u8fbe\u4f20\u9001\u95e8\n        if self.current_state == AIState.GETOUT:\n            portal_pos = np.array(game_state.portal_coord)\n            dist_to_portal = np.linalg.norm(pos - portal_pos)\n            final_score += 30 / (dist_to_portal + 1)\n        return final_score\n\n    def get_valid_moves(self, pos, game_state):\n        \"\"\"\u83b7\u53d6\u6709\u6548\u7684\u79fb\u52a8\u65b9\u5411\"\"\"\n        moves = []\n        directions = [\n            (np.array(list(Update.UP.value)), Direction.UP.value),  # UP\n            (np.array(list(Update.LEFT.value)), Direction.LEFT.value),  # LEFT\n            (np.array(list(Update.DOWN.value)), Direction.DOWN.value),  # DOWN\n            (np.array(list(Update.RIGHT.value)), Direction.RIGHT.value),  # RIGHT\n        ]\n        for direction, move_num in directions:\n            new_pos = pos + direction\n            if self.is_valid_position(new_pos, game_state):\n                moves.append((new_pos, move_num))\n        return moves\n\n    def is_valid_position(self, pos, game_state):\n        \"\"\"\u68c0\u67e5\u4f4d\u7f6e\u662f\u5426\u6709\u6548\"\"\"\n        x, y = int(pos[0]), int(pos[1])\n        if 0 &lt;= x &lt; game_state.board_size and 0 &lt;= y &lt; game_state.board_size:\n            if self.current_state != AIState.GETOUT:\n                if game_state.board[x][y] == Space.PORTAL.value:\n                    return False\n            if game_state.board[x][y] != Space.WALL.value:\n                return True\n        return False\n\n    def choose_move(self, game_state: GameState):\n        \"\"\"\u9009\u62e9\u79fb\u52a8\u65b9\u5411\"\"\"\n        # \u521d\u59cb\u5316\n        if game_state.round == 1:\n            self.init_bean_num = self.count_remaining_bean(game_state)\n        self.board_size = game_state.board_size\n        self.update_state(game_state)\n        pacman_pos = np.array(game_state.pacman_pos)\n        valid_moves = self.get_valid_moves(pacman_pos, game_state)\n        # \u8bc4\u4f30\u6bcf\u4e2a\u53ef\u80fd\u7684\u79fb\u52a8\n        move_scores = []\n        for new_pos, move_num in valid_moves:\n            score = self.evaluate_position(new_pos, game_state)\n            move_scores.append((score, move_num))\n        # \u9009\u62e9\u6700\u4f73\u79fb\u52a8\n        if move_scores:\n            best_score, best_move = max(move_scores, key=lambda x: x[0])\n            # \u66f4\u65b0\u5386\u53f2\u8bb0\u5f55\n            self.history.append(tuple(pacman_pos))\n            return [best_move]\n        return [Direction.STAY.value]  # \u9ed8\u8ba4\u505c\u7559\n\nai_func = PacmanAI().choose_move\n__all__ = [\"ai_func\"]\n</code></pre> \u6ce8\u610f\uff1a\u6309\u7167\u8981\u6c42\uff0c\u6211\u4eec\u7684choose_move\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u5217\u8868\uff0c\u5e76\u81ea\u5b9a\u4e49\u5bfc\u51fa\u540d\u79f0\u4e3aai_func\u3002</p>"},{"location":"instruction/pacman/#_2","title":"\u5e7d\u7075","text":"<p>\u56e0\u4e3a\u5e7d\u7075\u63a7\u5236\u8005\u80fd\u591f\u63a7\u5236\u591a\u4e2a\u5e7d\u7075\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7684\u5e7d\u7075\u6784\u9020\u4e0d\u540c\u7684\u7b56\u7565\uff0c\u8fbe\u5230\u56f4\u5835\u5377\u738b\u7684\u76ee\u7684\u3002</p> <p>\u5e7d\u7075AI\u7684\u4e3b\u8981\u7b56\u7565\u5305\u62ec:</p> <ol> <li>\u57fa\u672c\u529f\u80fd</li> <li>\u4f7f\u7528\u66fc\u54c8\u987f\u8ddd\u79bb\u8ba1\u7b97\u4f4d\u7f6e\u95f4\u8ddd\u79bb</li> <li>\u83b7\u53d6\u6709\u6548\u79fb\u52a8\u65b9\u5411</li> <li>A*\u5bfb\u8def\u7b97\u6cd5\u5b9e\u73b0\u8def\u5f84\u89c4\u5212</li> <li> <p>\u8bb0\u5f55\u5386\u53f2\u4f4d\u7f6e\u907f\u514d\u91cd\u590d\u79fb\u52a8</p> </li> <li> <p>\u4e09\u4e2a\u5e7d\u7075\u7684\u4e0d\u540c\u7b56\u7565</p> </li> </ol> <p>\u5e7d\u70751(Ghost 0): - \u76f4\u63a5\u8ffd\u51fb\u6a21\u5f0f - \u4f7f\u7528A*\u7b97\u6cd5\u5bfb\u627e\u6700\u77ed\u8def\u5f84\u8ffd\u51fb\u5377\u738b - \u4f5c\u4e3a\u4e3b\u8981\u8ffd\u51fb\u8005</p> <p>\u5e7d\u70752(Ghost 1):  - \u9884\u6d4b\u622a\u51fb\u6a21\u5f0f - \u9884\u6d4b\u5377\u738b\u79fb\u52a8\u65b9\u5411 - \u63d0\u524d\u79fb\u52a8\u5230\u9884\u6d4b\u4f4d\u7f6e\u62e6\u622a - \u4e0e\u5e7d\u70751\u91cd\u5408\u65f6\u968f\u673a\u79fb\u52a8</p> <p>\u5e7d\u70753(Ghost 2): - \u534f\u540c\u5305\u56f4\u6a21\u5f0f  - \u53c2\u8003\u5e7d\u70751\u4f4d\u7f6e\u8fdb\u884c\u5305\u56f4 - \u5c1d\u8bd5\u5207\u65ad\u5377\u738b\u9003\u8dd1\u8def\u7ebf - \u4e0e\u5176\u4ed6\u5e7d\u7075\u91cd\u5408\u65f6\u968f\u673a\u79fb\u52a8</p> <ol> <li>\u79fb\u52a8\u51b3\u7b56</li> <li>\u8ddd\u79bb\u5377\u738b\u5f88\u8fd1(&lt;=3)\u65f6\u76f4\u63a5\u8ffd\u51fb</li> <li>\u8ddd\u79bb\u8f83\u8fdc\u65f6\u6839\u636e\u4e0d\u540c\u5e7d\u7075\u7b56\u7565\u884c\u52a8</li> <li>\u4f7f\u7528\u5386\u53f2\u8bb0\u5f55\u907f\u514d\u91cd\u590d\u79fb\u52a8</li> <li> <p>\u5728\u65e0\u6cd5\u5230\u8fbe\u76ee\u6807\u65f6\u9009\u62e9\u6700\u8fd1\u8def\u5f84</p> </li> <li> <p>\u5173\u952e\u5b9e\u73b0</p> </li> <li>\u4f7f\u7528A*\u7b97\u6cd5\u8fdb\u884c\u8def\u5f84\u89c4\u5212</li> <li>\u8ba1\u7b97\u66fc\u54c8\u987f\u8ddd\u79bb\u8bc4\u4f30\u4f4d\u7f6e</li> <li>\u8bb0\u5f55\u5386\u53f2\u4f4d\u7f6e\u9632\u6b62\u91cd\u590d</li> <li>\u4e0d\u540c\u5e7d\u7075\u534f\u540c\u914d\u5408</li> </ol> <p>\u901a\u8fc7\u4ee5\u4e0a\u7b56\u7565,\u4e09\u4e2a\u5e7d\u7075\u53ef\u4ee5\u6709\u6548\u914d\u5408\u56f4\u5835\u5377\u738b\u3002</p> <pre><code>from core.gamedata import *\nimport random\nimport numpy as np\n\ndef parse(x: tuple):\n    if x == (0, 0):\n        return Direction.STAY.value\n    if x == (1, 0):\n        return Direction.UP.value\n    if x == (-1, 0):\n        return Direction.DOWN.value\n    if x == (0, 1):\n        return Direction.RIGHT.value\n    if x == (0, -1):\n        return Direction.LEFT.value\n\n\nclass GhostAI:\n    def __init__(self):\n        self.position_history = {0: [], 1: [], 2: []}\n        self.history_length = 5\n\n    def manhattan_distance(self, pos1, pos2):\n        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])\n\n    def get_valid_moves(self, pos, game_state):\n        valid_moves = []\n        directions = [\n            ([1, 0], 1),  # UP\n            ([-1, 0], 3),  # DOWN\n            ([0, -1], 2),  # LEFT\n            ([0, 1], 4),  # RIGHT\n        ]\n\n        for direction, move_value in directions:\n            new_pos = [pos[0] + direction[0], pos[1] + direction[1]]\n            if (\n                0 &lt;= new_pos[0] &lt; game_state.board_size\n                and 0 &lt;= new_pos[1] &lt; game_state.board_size\n                and game_state.board[new_pos[0]][new_pos[1]] != 0\n            ):\n                valid_moves.append((new_pos, move_value))\n        return valid_moves\n\n    def a_star_search(self, start: np.ndarray, goal: np.ndarray, game_state: GameState):\n        open_set = set()\n        open_set.add(tuple(start))\n        came_from = {}\n\n        g_score = {tuple(start): 0}\n        f_score = {tuple(start): self.manhattan_distance(start, goal)}\n\n        while open_set:\n            current = min(open_set, key=lambda x: f_score.get(x, float(\"inf\")))\n            if current == tuple(goal):\n                path = []\n                while current in came_from:\n                    path.append(current)\n                    current = came_from[current]\n                path.reverse()\n                return path\n\n            open_set.remove(current)\n            for direction, _ in self.get_valid_moves(list(current), game_state):\n                neighbor = tuple(direction)\n                tentative_g_score = g_score[current] + 1\n\n                if tentative_g_score &lt; g_score.get(neighbor, float(\"inf\")):\n                    came_from[neighbor] = current\n                    g_score[neighbor] = tentative_g_score\n                    f_score[neighbor] = tentative_g_score + self.manhattan_distance(\n                        neighbor, goal\n                    )\n                    if neighbor not in open_set:\n                        open_set.add(neighbor)\n\n        return []\n\n    def calculate_stagnation_penalty(self, new_pos, ghost_id):\n        if not self.position_history[ghost_id]:\n            return 0\n        repeat_count = sum(\n            1\n            for pos in self.position_history[ghost_id]\n            if pos[0] == new_pos[0] and pos[1] == new_pos[1]\n        )\n        return repeat_count * 2\n\n    def update_history(self, ghost_id, new_pos):\n        self.position_history[ghost_id].append(new_pos)\n        if len(self.position_history[ghost_id]) &gt; self.history_length:\n            self.position_history[ghost_id].pop(0)\n\n    def choose_moves(self, game_state: GameState):\n        moves = []\n        pacman_pos = game_state.pacman_pos\n\n        for ghost_id in range(3):\n            current_pos = game_state.ghosts_pos[ghost_id]\n            valid_moves = self.get_valid_moves(current_pos, game_state)\n\n            if not valid_moves:\n                moves.append(Direction.STAY.value)\n                continue\n\n            # \u8ba1\u7b97\u5230\u5377\u738b\u7684\u8ddd\u79bb\n            a_star_path = self.a_star_search(current_pos, pacman_pos, game_state)\n            distance_to_pacman = len(a_star_path) if a_star_path else float(\"inf\")\n\n            # \u5982\u679c\u8ddd\u79bb\u5f88\u8fd1\uff08\u6bd4\u5982\u5c0f\u4e8e3\uff09\uff0c\u76f4\u63a5\u8ffd\u51fb\n            if distance_to_pacman &lt;= 3:\n                best_move = (\n                    a_star_path[0],\n                    parse(\n                        (\n                            a_star_path[0][0] - current_pos[0],\n                            a_star_path[0][1] - current_pos[1],\n                        )\n                    ),\n                )\n            else:\n                # \u8ddd\u79bb\u8f83\u8fdc\u65f6\u4f7f\u7528\u66f4\u590d\u6742\u7684\u7b56\u7565\n                target_pos = pacman_pos\n                # \u4e0d\u540c\u5e7d\u7075\u7684\u7b56\u7565\n                if ghost_id == 0:\n                    # \u901a\u8fc7A*\u5bfb\u8def\u7b97\u6cd5\u76f4\u63a5\u8ffd\u51fb\n                    pass\n                elif ghost_id == 1:\n                    if (\n                        current_pos[0] == game_state.ghosts_pos[0][0]\n                        and current_pos[1] == game_state.ghosts_pos[0][1]\n                    ):\n                        # \u7b2c\u4e8c\u4e2a\u5e7d\u7075\u4e0e\u7b2c\u4e00\u4e2a\u5e7d\u7075\u91cd\u5408\u65f6\uff0c\u968f\u673a\u79fb\u52a8\n                        best_move = random.choice(valid_moves)\n                        self.update_history(ghost_id, best_move[0])\n                        moves.append(best_move[1])\n                        continue\n                    # \u9884\u6d4b\u5377\u738b\u79fb\u52a8\u65b9\u5411\n                    dx = pacman_pos[0] - current_pos[0]\n                    dy = pacman_pos[1] - current_pos[1]\n                    predicted_x = pacman_pos[0] + (1 if dx &gt; 0 else -1 if dx &lt; 0 else 0)\n                    predicted_y = pacman_pos[1] + (1 if dy &gt; 0 else -1 if dy &lt; 0 else 0)\n                    if (\n                        0 &lt;= predicted_x &lt; game_state.board_size\n                        and 0 &lt;= predicted_y &lt; game_state.board_size\n                        and game_state.board[predicted_x][predicted_y] != 0\n                    ):\n                        target_pos = np.array([predicted_x, predicted_y])\n                else:\n                    if (\n                        current_pos[0] == game_state.ghosts_pos[0][0]\n                        and current_pos[1] == game_state.ghosts_pos[0][1]\n                    ) or (\n                        current_pos[0] == game_state.ghosts_pos[1][0]\n                        and current_pos[1] == game_state.ghosts_pos[1][1]\n                    ):\n\n                        # \u7b2c\u4e09\u4e2a\u5e7d\u7075\u4e0e\u7b2c\u4e00\u4e2a\u6216\u7b2c\u4e8c\u4e2a\u5e7d\u7075\u91cd\u5408\u65f6\uff0c\u968f\u673a\u79fb\u52a8\n                        best_move = random.choice(valid_moves)\n                        self.update_history(ghost_id, best_move[0])\n                        moves.append(best_move[1])\n                        continue\n                    # \u5c1d\u8bd5\u5207\u65ad\u8def\u7ebf\n                    other_ghost = game_state.ghosts_pos[0]  # \u4f7f\u7528\u7b2c\u4e00\u4e2a\u5e7d\u7075\u4f5c\u4e3a\u53c2\u8003\n                    dx = pacman_pos[0] - other_ghost[0]\n                    dy = pacman_pos[1] - other_ghost[1]\n                    intercept_x = pacman_pos[0] + (1 if dx &gt; 0 else -1 if dx &lt; 0 else 0)\n                    intercept_y = pacman_pos[1] + (1 if dy &gt; 0 else -1 if dy &lt; 0 else 0)\n                    intercept_x = max(0, min(intercept_x, game_state.board_size - 1))\n                    intercept_y = max(0, min(intercept_y, game_state.board_size - 1))\n                    if game_state.board[intercept_x][intercept_y] != 0:\n                        target_pos = np.array([intercept_x, intercept_y])\n\n                path = self.a_star_search(current_pos, target_pos, game_state)\n\n                if path:\n                    best_move = (\n                        path[0],\n                        parse(\n                            (path[0][0] - current_pos[0], path[0][1] - current_pos[1])\n                        ),\n                    )\n                else:\n                    best_move = min(\n                        valid_moves,\n                        key=lambda x: self.manhattan_distance(x[0], pacman_pos),\n                    )\n\n            self.update_history(ghost_id, best_move[0])\n            moves.append(best_move[1])\n\n        return moves\n\n\nai_func = GhostAI().choose_moves\n__all__ = [\"ai_func\"]\n</code></pre>"},{"location":"instruction/pacman/#stage3","title":"stage3\uff1a\u70bc\u4e39","text":"<p>stage2\u5df2\u7ecf\u662f\u4e00\u4e2a\u8f83\u4f18\u89e3\uff0c\u4f46\u8ddd\u79bb\u6700\u4f18\u89e3\u4ecd\u6709\u8ddd\u79bb\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u72b6\u6001\u7a7a\u95f4\u7684\u904d\u5386\u4e0d\u591f\u5f7b\u5e95\u3002\u5176\u6b21\uff0c\u56fa\u5b9a\u5728\u535a\u5f08\u4e2d\u4e5f\u5f88\u96be\u4e8b\u6700\u4f18\u89e3\u3002\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u5bf9\u6700\u4f18\u7b56\u7565\u8fdb\u884c\u6c42\u89e3\u3002</p> <p>\u6211\u4eec\u4ee5DQN\u4e3a\u4f8b\u4ecb\u7ecd\u4f7f\u7528Pacman SDK\u4e2d\u7684Gym Environment\u8fdb\u884c\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60\u8bad\u7ec3\u7684\u6d41\u7a0b\u3002</p> <p>\u9996\u5148\u6211\u4eec\u8bbe\u8ba1\u5bf9\u5c40\u9762\u7684\u8868\u793a\u3002\u6b64\u5904\u7684\u5b9e\u73b0\u4e3a\u5c06\u68cb\u76d8\u3001\u5e7d\u7075\u4f4d\u7f6e\u3001\u5377\u738b\u4f4d\u7f6e\u548c\u51fa\u53e3\u4f4d\u7f6e\u6784\u6210\u7684\u56db\u901a\u9053\u4e8c\u7ef4\u5f20\u91cf\u548c\u5c06\u6e38\u620f\u9636\u6bb5\u3001\u56de\u5408\u6570\u3001\u68cb\u76d8\u5927\u5c0f\u548c\u51fa\u53e3\u662f\u5426\u6fc0\u6d3b\u91cd\u590d\u5341\u6b21\u6784\u6210\u7684\u4e00\u7ef4\u5411\u91cf\u4f5c\u4e3a\u4e00\u4e2a\u5c40\u9762\u7684\u8868\u793a\u3002\u8be5\u8868\u793a\u53ef\u4ee5\u901a\u8fc7<code>state_dict_to_tensor</code>\u65b9\u6cd5\u7531step\u51fd\u6570\u8fd4\u56de\u7684state\u83b7\u5f97\u3002</p> <p>\u63a5\u7740\u4f7f\u7528pytorch\u5b9e\u73b0\u52a8\u4f5c\u4ef7\u503c\u7f51\u7edc\uff08\u6b64\u5904\u4ec5\u5c55\u793aPacman\u52a8\u4f5c\u4ef7\u503c\u7f51\u7edc\u7684\u5b9e\u73b0\uff09\uff1a <pre><code># model.py\nclass PacmanNet(nn.Module):\n    def __init__(self, input_channel_num, num_actions, extra_size):\n        super().__init__()\n        self.channels = input_channel_num\n        self.embeddings = nn.ModuleList(\n            [nn.Embedding(9, 16) for _ in range(input_channel_num)])\n        self.conv1 = nn.Conv2d(64, 64, kernel_size=8, stride=4)\n        self.conv2 = nn.Conv2d(64, 64, kernel_size=4, stride=2)\n        self.bn = nn.BatchNorm2d(64)\n        self.conv3 = nn.Conv2d(64, 64, kernel_size=3, stride=2)\n\n        self.encoder = nn.Linear(extra_size, 64)\n\n        self.fc1 = nn.Linear(64, 32)\n        self.fc2 = nn.Linear(32, num_actions)\n\n    def forward(self, x, y):\n        B, C, H, W = x.shape\n        embedded_channels = []\n        for i in range(self.channels):\n            flattened_channel = x[:, i, :, :].view(B, -1).long()\n            embedded_channel = self.embeddings[i](flattened_channel)\n            embedded_channel = embedded_channel.view(\n                B, 16, H, W)\n            embedded_channels.append(embedded_channel)\n        # Concatenate along the channel dimension\n        x = torch.cat(embedded_channels, dim=1)\n\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        x = self.bn(x)\n        x = F.relu(self.conv3(x))\n        y = F.sigmoid(self.encoder(y))\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x+y))\n        return self.fc2(x)\n</code></pre></p> <p>\u968f\u540e\u5b9e\u73b0epsilon-greedy\u91c7\u6837\uff1a <pre><code># train.py\n\n# epsilon-greedy policy for rollout\ndef select_action_ghost(state, extra, epsilon, policy_net):\n    if np.random.rand() &lt; epsilon:\n        return np.random.randint(size=3, low=0, high=4)\n    else:\n        with torch.no_grad():\n            values = policy_net(\n                state.to(device), extra.to(device)).reshape(-1, 5)\n            # print(f\"{values.shape=}\")\n            return torch.argmax(values, dim=1).cpu().numpy()\n\n\ndef select_action_pacman(state, extra, epsilon, policy_net):\n    if np.random.rand() &lt; epsilon:\n        return np.random.randint(low=0, high=4)\n    else:\n        with torch.no_grad():\n            return torch.argmax(policy_net(state.to(device), extra.to(device))).cpu().item()\n</code></pre></p> <p>\u6700\u540e\u6211\u4eec\u5b9e\u73b0Q-learning\u7b97\u6cd5\uff1a <pre><code># train.py\n\n# training iteration\nif __name__ == \"__main__\":\n    num_episodes = 1000\n    epsilon = EPSILON_START\n    for episode in range(num_episodes):\n        state = env.reset(mode=\"local\")\n        state, extra = state_dict_to_tensor(state)\n        # print(state.shape, extra.shape)\n\n        for t in range(1000):\n            action1 = select_action_pacman(state, extra, epsilon, policy_net_pacman)\n            action2 = select_action_ghost(\n                state, extra, epsilon, policy_net_ghost)\n            next_state, reward1, reward2, done, _ = env.step(action1, action2)\n            env.render('local')\n            next_state, next_extra = state_dict_to_tensor(next_state)\n            # next_state = torch.tensor(\n            # next_state, dtype=torch.float32).unsqueeze(0)\n            reward1 = torch.tensor([reward1], dtype=torch.float32)\n            reward2 = torch.tensor([reward2], dtype=torch.float32)\n            # print(next_state.shape, next_extra.shape)\n            print(reward1.item(), reward2.tolist())\n\n\n            memory.append(\n                Transition(\n                    state,\n                    extra,\n                    torch.tensor([[action1]]),\n                    torch.tensor([[action2]]),\n                    next_state,\n                    next_extra,\n                    reward1,\n                    reward2,\n                )\n            )\n            if len(memory) &gt; MEMORY_SIZE:\n                memory.pop(0)\n\n            state = next_state\n\n            optimize_model()\n\n            if done:\n                break\n\n        if episode % TARGET_UPDATE == 0:\n            target_net_pacman.load_state_dict(policy_net_pacman.state_dict())\n            target_net_ghost.load_state_dict(policy_net_ghost.state_dict())\n            torch.save(policy_net_pacman.state_dict(), \"pacman.pth\")\n            torch.save(policy_net_ghost.state_dict(), \"ghost.pth\")\n\n        epsilon = max(EPSILON_END, EPSILON_START - episode / EPSILON_DECAY)\n</code></pre></p>"},{"location":"instruction/pacman/#stage4","title":"stage4\uff1a\u53ef\u80fd\u7684\u6539\u8fdb","text":"<p>\u524d\u8ff0\u4e09\u4e2a\u9636\u6bb5\u63d0\u4f9b\u4e86\u51e0\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u8bbe\u8ba1 agent \u7684\u65b9\u6cd5\uff0c\u4f46\u4ecd\u6709\u5f88\u591a\u6539\u8fdb\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u5373\u4f7f\u4e0d\u91c7\u7528\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5bf9\u6297\u641c\u7d22\uff08\u5982 Minimax \u7b97\u6cd5\uff09\u548c\u8499\u7279\u5361\u6d1b\u6811\u641c\u7d22\uff08MCTS\uff09\u7b49\u65b9\u6cd5\u6765\u641c\u7d22\u6700\u4f18\u89e3\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u7ecf\u5178\u7684\u535a\u5f08\u95ee\u9898\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u53ef\u4ee5\u4e3a\u6e38\u620f\u63d0\u4f9b\u6709\u6548\u7684\u7b56\u7565\u3002</p> <p>\u53e6\u5916\uff0c\u9664\u4e86\u7b80\u5355\u5730\u4f7f\u7528DQN\uff0c\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u5176\u4ed6\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\uff0c\u5982 Proximal Policy Optimization (PPO)\u3001Advantage Actor-Critic (A2C) \u7b49\u3002\u8fd9\u4e9b\u7b97\u6cd5\u5728\u5904\u7406\u590d\u6742\u7b56\u7565\u65f6\u8868\u73b0\u66f4\u597d\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u66f4\u4f18\u7684\u6548\u679c\u3002</p> <p>\u6b64\u5916\uff0cPacman \u548c Ghosts \u662f\u5bf9\u7acb\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u3002\u53ef\u4ee5\u7814\u7a76\u591a\u667a\u80fd\u4f53\u5f3a\u5316\u5b66\u4e60\uff08MARL\uff09\u65b9\u6cd5\uff0c\u4f7f\u5f97\u5404\u4e2a\u667a\u80fd\u4f53\u4e4b\u95f4\u80fd\u591f\u66f4\u597d\u5730\u534f\u4f5c\u6216\u5bf9\u6297\uff0c\u4ece\u800c\u63d0\u5347\u6574\u4f53\u8868\u73b0\u3002</p> <p>\u672c\u6587\u4ec5\u4f9b\u5927\u5bb6\u4e0a\u624b\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u671f\u671b\u5927\u5bb6\u80fd\u591f\u901a\u8fc7\u6539\u8fdb\u524d\u8ff0\u65b9\u6cd5\u6216\u4f7f\u7528\u66f4\u4f18\u7684\u65b9\u6cd5\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002</p>"},{"location":"instruction/test_race/","title":"\u70ed\u8eab\u8d5b\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u6587\u6863\u4e3a\u70ed\u8eab\u8d5b\uff08\u5f00\u5fc3\u6d88\u6d88\u4e50\uff09\u7684\u5f00\u53d1\u6307\u5357\u3002\u672c\u6587\u6863\u57fa\u4e8e\u70ed\u8eab\u8d5bsdk\u8fdb\u884c\u5f00\u53d1\uff0csdk\u7684\u4f7f\u7528\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\u5f15\u5bfc\u6587\u6863sdk\u90e8\u5206\u7684\u5bf9\u5e94\u6587\u6863\u3002</p>"},{"location":"instruction/test_race/#stage1-ai","title":"stage1: \u5b9e\u73b0\u4e00\u4e2a\u80fd\u8fd0\u884c\u7684ai","text":"<p>\u6211\u4eec\u9996\u5148\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5728\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684agent\u3002</p> <p>\u6839\u636esdk\u7684\u6587\u6863\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2aai\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2aEliminationEnv\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u4e00\u4e2a<code>[0, 159999]</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u968f\u673a\u91c7\u6837\u5b9e\u73b0\u8be5\u51fd\u6570\uff1a</p> <pre><code># ai.py\ndef ai(env: EliminationEnv):\n    \"\"\"\n    Args:\n        env (EliminationEnv): \u6bcf\u5c40\u6e38\u620f\u7ef4\u62a4\u7684\u552f\u4e00\u5c40\u9762\uff0c\u8bf7\u4e0d\u8981\u76f4\u63a5\u64cd\u4f5c\u8be5\u5c40\u9762\n\n    Returns:\n        int: \u64cd\u4f5c\u5bf9\u5e94\u7684\u5e8f\u53f7\uff0c\u53ef\u4ee5\u4f7f\u7528env\u7684coord_to_num\u65b9\u6cd5\u5c06\u5750\u6807\u8f6c\u6362\u4e3a\u64cd\u4f5c\u5e8f\u53f7\n    \"\"\"\n    action = random.randint(0, 159999)\n    return action\n</code></pre> <p>\u968f\u540e\uff0c\u6211\u4eec\u5728main.py\u4e2d\u5c06ai\u4f20\u5165controller\uff1a</p> <pre><code># main.py\nfrom ai import ai\n...\n\nif __name__ == \"__main__\":\n    controller = Controller()\n    controller.run(ai)\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u80fd\u591f\u5728\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684agent\u3002\u8fd9\u4e2aagent\u7684\u7b56\u7565\u662f\uff1a\u5728\u4efb\u610f\u4e00\u4e2a\u56de\u5408\uff0c\u4ece\u68cb\u76d8\u4e0a\u9009\u53d6\u4e24\u4e2a\u5757\u968f\u673a\u4ea4\u6362\u3002</p>"},{"location":"instruction/test_race/#stage2ai","title":"stage2\uff1a\u5b9e\u73b0\u4e00\u4e2a\u6709\u7b56\u7565\u7684ai","text":"<p>\u5728stage1\u4e2d\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u6613\u7684agent\u3002\u4f46\u662f\uff0c\u8be5agent\u7684\u7b56\u7565\u6709\u4e9b\u8fc7\u4e8e\u7b80\u6613\uff0c\u5e76\u4e14\u5b8c\u5168\u6ca1\u6709\u4f7f\u7528\u73af\u5883\u4fe1\u606f\u3002\u5728\u672c\u9636\u6bb5\uff0c\u6211\u4eec\u5c1d\u8bd5\u5229\u7528env\u8fdb\u884cagent\u7684\u7b56\u7565\u7f16\u5199\u3002</p> <p>\u673a\u5668\u5b66\u4e60\u4e2d\u6700\u7b80\u6613\u7684\u7b97\u6cd5\u4e4b\u4e00\u662f\u8d2a\u5fc3\u7b97\u6cd5\u3002\u5bf9\u4e8e\u672c\u6e38\u620f\uff0c\u7531\u4e8e\u52a8\u4f5c\u7a7a\u95f4\u59cb\u7ec8\u4e0d\u53d1\u751f\u6539\u53d8\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u5373\uff1a\u904d\u5386\u6240\u6709\u52a8\u4f5c\uff0c\u4ece\u4e2d\u9009\u62e9\u5f53\u524d\u5c40\u9762\u4e0b\u6536\u76ca\u6700\u5927\u7684\u4e00\u4e2a\u3002\u4f46\u662f\u7531\u4e8e\u52a8\u4f5c\u7a7a\u95f4\u5f88\u5927\uff0c\u5728\u65f6\u95f4\u9650\u5236\u5185\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8ba1\u7b97\u51fa\u6240\u6709\u52a8\u4f5c\u7684\u6536\u76ca\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u968f\u673a\u91c7\u6837\u6765\u9009\u62e9\u4e00\u4e2a\u6536\u76ca\u76f8\u5bf9\u8f83\u5927\u7684\u52a8\u4f5c\uff1a</p> <p><pre><code>def ai(env: EliminationEnv):\n    \"\"\"\n    Args:\n        env (EliminationEnv): \u6bcf\u5c40\u6e38\u620f\u7ef4\u62a4\u7684\u552f\u4e00\u5c40\u9762\uff0c\u8bf7\u4e0d\u8981\u76f4\u63a5\u64cd\u4f5c\u8be5\u5c40\u9762\n\n    Returns:\n        int: \u64cd\u4f5c\u5bf9\u5e94\u7684\u5e8f\u53f7\uff0c\u53ef\u4ee5\u4f7f\u7528env\u7684coord_to_num\u65b9\u6cd5\u5c06\u5750\u6807\u8f6c\u6362\u4e3a\u64cd\u4f5c\u5e8f\u53f7\n    \"\"\"\n    max_reward = 0\n    max_action = 0\n\n    actions = list(range(160000))\n    random.shuffle(actions)\n\n    start = time.time()\n    for i in actions:\n        env_copy = deepcopy(env)\n        board, reward, end = env_copy.step(i)\n        if reward &gt; max_reward:\n            max_reward = reward\n            max_action = i\n\n        if time.time() - start &gt; 0.9:\n            break\n    return max_action\n</code></pre> \u8be5ai\u5728\u8bc4\u6d4b\u673a\u4e0a\uff0c\u6bcf\u79d2\u5927\u7ea6\u80fd\u641c\u7d221000\u6761\u6307\u4ee4\uff0c\u9009\u53d6\u5230\u8d2a\u5fc3\u610f\u4e49\u4e0b\u6700\u4f18\u52a8\u4f5c\u7684\u6982\u7387\u4e5f\u63d0\u5347\u4e861000\u500d\uff0c\u5e76\u4e14\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u8be5\u89e3\u5df2\u7ecf\u662f\u53ef\u63a5\u53d7\u7684\u89e3\u3002</p>"},{"location":"instruction/test_race/#stage3","title":"stage3\uff1a\u70bc\u4e39","text":"<p>stage2\u5df2\u7ecf\u662f\u4e00\u4e2a\u8f83\u4f18\u89e3\uff0c\u4f46\u8ddd\u79bb\u6700\u4f18\u89e3\u4ecd\u6709\u8ddd\u79bb\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u72b6\u6001\u7a7a\u95f4\u7684\u904d\u5386\u4e0d\u591f\u5f7b\u5e95\u3002\u5176\u6b21\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u5728\u535a\u5f08\u4e2d\u4e5f\u5f88\u96be\u627e\u5230\u6700\u4f18\u89e3\u3002\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u5bf9\u6700\u4f18\u7b56\u7565\u8fdb\u884c\u6c42\u89e3\u3002</p> <p>\u6211\u4eec\u4ee5DQN\u4e3a\u4f8b\u8bb2\u89e3\u4f7f\u7528sdk\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u5148\u4f7f\u7528pytorch\u5b9e\u73b0\u72b6\u52a8\u4f5c\u4ef7\u503c\u7f51\u7edc\uff1a <pre><code># dqn.py\nclass DQN(nn.Module):\n\n    def __init__(self, output_dim):\n        super(DQN, self).__init__()\n        self.emb = nn.Embedding(5, 32)\n        self.conv = nn.Conv2d(32, 64, 11, padding='same')\n        self.conv2 = nn.Conv2d(32, 64, 7, padding='same')\n        self.conv3 = nn.Conv2d(32, 64, 3, padding='same')\n        self.bn = nn.BatchNorm2d(64)\n        self.conv4 = nn.Conv2d(64, 4, 3, padding='same')\n        self.fc = nn.Linear(20*20*4, output_dim)\n\n    def forward(self, x):\n        B, W, H = x.shape\n        x = self.emb(x.view(B, -1)).view(B, W, H, 32).permute(0, 3, 1, 2)\n        x = self.bn(self.conv(x)+self.conv3(x)+self.conv3(x))\n        x = nn.functional.leaky_relu(x)\n        x = self.conv4(x)\n        return self.fc(x.contiguous().view(B, -1))\n</code></pre> \u8be5\u6a21\u578b\u8f93\u5165\u4e3a<code>Batchsize * size * size</code>\u7684\u5c40\u9762\u5f20\u91cf\uff0c\u8f93\u51fa\u4e3a<code>160000</code>\u7ef4\u7684Q\u503c\u5411\u91cf\u3002</p> <p>\u63a5\u7740\u6211\u4eec\u5b9e\u73b0\u7ecf\u9a8c\u56de\u653e\u548cepsilon-greedy\u91c7\u6837\uff1a <pre><code># dqn.py\nclass ReplayBuffer:\n    def __init__(self, capacity):\n        self.buffer = deque(maxlen=capacity)\n\n    def push(self, state, action, reward, next_state, done):\n        self.buffer.append((state, action, reward, next_state, done))\n\n    def sample(self, batch_size):\n        state, action, reward, next_state, done = zip(\n            *random.sample(self.buffer, batch_size))\n        return np.stack(state), action, reward, np.stack(next_state), done\n\n    def size(self):\n        return len(self.buffer)\n\n\ndef epsilon_greedy_action(q_values, epsilon):\n    if random.random() &lt; epsilon:\n        return random.randint(0, q_values.size(-1) - 1)\n    else:\n        return q_values.argmax().item()\n\n\ndef get_action(state_tensor, model, epsilon):\n    q_values = model(state_tensor)\n    return epsilon_greedy_action(q_values, epsilon)\n</code></pre> \u4e8e\u662f\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e2a\u8f93\u5165\u5c40\u9762\uff0c\u8f93\u51fa\u64cd\u4f5c\u5e8f\u53f7\u7684AI\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8bad\u7ec3\u6211\u4eec\u7684\u6a21\u578b\uff1a</p> <p><pre><code># train.py\ndef train_model(\n    env,\n    self_model,\n    enemy_model,\n    num_episodes=1000,\n    buffer_len=5000,\n    batch_size=4,\n    gamma=0.99,\n    lr=1e-3,\n    epsilon_start=1.0,\n    epsilon_end=0.2,\n    epsilon_decay=10000,\n    save_model=False\n):\n    action_dim = env.action_space.n\n    target_q_net = DQN(action_dim).to(device)\n    target_q_net.load_state_dict(self_model.state_dict())\n\n    optimizer = optim.Adam(self_model.parameters(), lr=lr)\n    replay_buffer = ReplayBuffer(capacity=5000)\n\n    epsilon = epsilon_start\n    epsilon_decay_rate = (epsilon_start - epsilon_end) / epsilon_decay\n\n    for episode in range(num_episodes):\n        state = env.reset()\n        episode_reward = 0\n        done = False\n        seat = random.randint(0, 1)\n\n        while not done:\n            if seat == 0:\n                action = get_action(torch.LongTensor(state).unsqueeze(\n                    0).to(device), self_model, epsilon)\n                next_state, reward, done = env.step(action)\n\n                if not done:\n                    enemy_action = get_action(\n                        torch.LongTensor(next_state).unsqueeze(0).to(device), enemy_model, epsilon)\n                    next_state, enemy_reward, done = env.step(enemy_action)\n                    reward -= enemy_reward\n\n            else:\n                enemy_action = get_action(\n                    torch.LongTensor(state).unsqueeze(0).to(device), enemy_model, epsilon)\n                next_state, enemy_reward, done = env.step(enemy_action)\n                reward = -enemy_reward\n\n                if not done:\n                    action = get_action(torch.LongTensor(next_state).unsqueeze(\n                        0).to(device), self_model, epsilon)\n                    next_state, reward, done = env.step(action)\n                    reward = reward - enemy_reward\n\n            # \u5b58\u50a8\u7ecf\u9a8c\u5230\u56de\u653e\u7f13\u51b2\u533a\n            replay_buffer.push(\n                state,\n                action,\n                reward,\n                next_state,\n                done,\n            )\n\n            state = next_state\n            episode_reward += reward\n\n            # \u7ecf\u9a8c\u56de\u653e\u8bad\u7ec3\n            if replay_buffer.size() &gt;= batch_size:\n                batch_state, batch_action, batch_reward, batch_next_state, batch_done = replay_buffer.sample(\n                    batch_size)\n\n                batch_state_tensor = torch.LongTensor(batch_state).to(device)\n                batch_action_tensor = torch.LongTensor(batch_action).to(device)\n                batch_reward_tensor = torch.LongTensor(\n                    batch_reward).to(device)\n                batch_next_state_tensor = torch.LongTensor(\n                    batch_next_state).to(device)\n                batch_done_tensor = torch.LongTensor(batch_done).to(device)\n\n                q_values = self_model(batch_state_tensor)\n                next_q_values = target_q_net(batch_next_state_tensor)\n\n                # \u8ba1\u7b97Q\u76ee\u6807\u503c\n                target_q_values = batch_reward_tensor + gamma * \\\n                    (1 - batch_done_tensor) * next_q_values.max(1)[0]\n\n                # \u83b7\u53d6\u9009\u62e9\u7684\u52a8\u4f5c\u7684Q\u503c\n                q_value = q_values.gather(\n                    1, batch_action_tensor.unsqueeze(1)).squeeze(1)\n\n                # \u8ba1\u7b97\u635f\u5931\n                loss = nn.functional.mse_loss(\n                    q_value, target_q_values.detach())\n\n                # \u53cd\u5411\u4f20\u64ad\u548c\u4f18\u5316\n                optimizer.zero_grad()\n                loss.backward()\n                optimizer.step()\n\n            # \u66f4\u65b0epsilon\n            epsilon = max(epsilon_end, epsilon - epsilon_decay_rate)\n\n        # \u66f4\u65b0\u76ee\u6807\u7f51\u7edc\u53c2\u6570\n        if episode % 10 == 0:\n            target_q_net.load_state_dict(self_model.state_dict())\n\n        # \u5982\u679c\u9700\u8981\uff0c\u66f4\u65b0\u5bf9\u65b9\u7f51\u7edc\u53c2\u6570\n        if episode % 10 == 0:\n            enemy_model.load_state_dict(self_model.state_dict())\n\n        if save_model:\n            if episode % 50 == 0:\n                torch.save(target_q_net.state_dict(), \"model.pt\")\n\n        print(\n            f\"Episode {episode}, Total Reward: {episode_reward}, Epsilon: {epsilon}, loss: {loss.item()}\"\n        )\n\n    return self_model\n</code></pre> \u6700\u540e\uff0c\u6211\u4eec\u8bad\u7ec3\u6a21\u578b\u5e76\u4fdd\u5b58\u53c2\u6570</p> <pre><code># train.py\nenv = EliminationEnv()\naction_dim = env.action_space.n\n# \u521d\u59cb\u5316Q\u7f51\u7edc\nq_net = DQN(action_dim).to(device)\n</code></pre> <p>\u4e4b\u540e\uff0c\u6211\u4eec\u4fee\u6539ai\u51fd\u6570\u5e76\u4f20\u5165controller <pre><code># ai.py\nmodel = DQN(160000)\nmodel.load_state_dict(\"path/to/save/model.pt\")\ndef ai(env: EliminationEnv):\n    return get_action(torch.LongTensor(env.observe), model, 0)\n</code></pre></p>"},{"location":"instruction/test_race/#stage4","title":"stage4\uff1a\u53ef\u80fd\u7684\u6539\u8fdb","text":"<p>\u524d\u8ff0\u4e09\u4e2a\u9636\u6bb5\u63d0\u4f9b\u4e86\u51e0\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u8bbe\u8ba1agent\u7684\u65b9\u6cd5\uff0c\u4ecd\u6709\u5f88\u591a\u6539\u8fdb\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u5373\u4f7f\u4e0d\u91c7\u7528\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5bf9\u6297\u641c\u7d22\u3001\u8499\u7279\u5361\u6d1b\u7b49\u65b9\u6cd5\u641c\u7d22\u6700\u4f18\u89e3\u3002\u53c8\u4f8b\u5982\uff0cdqn\u7684\u91c7\u6837\u8fc7\u7a0b\u53ef\u4ee5\u7ed3\u5408\u641c\u7d22\u7b49\u65b9\u6cd5\u8fdb\u884c\u957f\u671f\u6700\u4f18\u89e3\u7684\u641c\u7d22\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u91c7\u7528PPO\u7b49\u65b9\u5f0f\u8fdb\u884c\u5f3a\u5316\u5b66\u4e60\u4e5f\u53ef\u4ee5\u8fbe\u5230\u66f4\u4f18\u7684\u6548\u679c\u3002\u672c\u6587\u4ec5\u4f9b\u5927\u5bb6\u4e0a\u624b\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u671f\u671b\u5927\u5bb6\u80fd\u591f\u901a\u8fc7\u6539\u8fdb\u524d\u8ff0\u65b9\u6cd5\u6216\u4f7f\u7528\u66f4\u4f18\u7684\u65b9\u6cd5\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002</p>"},{"location":"player/pacman/","title":"\u64ad\u653e\u5668\u4f7f\u7528\u8bf4\u660e","text":"<p>2025 Pacman \u64ad\u653e\u5668\u5f00\u53d1\u7ec4</p>"},{"location":"player/pacman/#_2","title":"\u57fa\u672c\u5143\u7d20","text":""},{"location":"player/pacman/#ui","title":"UI\u754c\u9762","text":"<ul> <li>\u5de6\u4e0a\u89d2\uff1a\u663e\u793a\u5f53\u524d\u64ad\u653e\u5668\u6a21\u5f0f<ul> <li>Replay: \u56de\u653e\u6a21\u5f0f</li> <li>Interactive: \u4ea4\u4e92\u6a21\u5f0f / \u663e\u793a\u5f53\u524d\u56de\u5408\u6570</li> </ul> </li> <li>\u9875\u9762\u9876\u7aef\uff1a\u663e\u793a\u5f53\u524d\u6240\u6301\u6709\u7684\u6280\u80fd<ul> <li>\u62a4\u76fe\uff1a\u62b5\u6d88\u4e00\u6b21\u4f24\u5bb3\uff0c\u4e0b\u65b9\u6570\u5b57\u4e3a\u5f53\u524d\u5269\u4f59\u62a4\u76fe\u6570</li> <li>\u78c1\u94c1\uff1a\u5438\u5f15\u9644\u8fd13x3\u8303\u56f4\u5185\u7684\u9053\u5177\u548c\u5f97\u5206\u8c46\uff0c\u4e0b\u65b9\u6570\u5b57\u4e3a\u78c1\u94c1\u5269\u4f59\u6b65\u6570</li> <li>\u52a0\u901f\uff1a\u589e\u52a0\u79fb\u52a8\u901f\u5ea6\u81f3<code>2</code>\uff0c\u4e0b\u65b9\u6570\u5b57\u4e3a\u52a0\u901f\u5269\u4f59\u6b65\u6570</li> <li>\u52a0\u500d: \u5f53\u524d\u56de\u5408\u5f97\u5206\u7ffb\u500d\uff0c\u4e0b\u65b9\u6570\u5b57\u4e3a\u52a0\u500d\u5269\u4f59\u6b65\u6570</li> </ul> </li> </ul>"},{"location":"player/pacman/#_3","title":"\u955c\u5934","text":"<ul> <li>\u6309\u4f4f\u9f20\u6807\u5de6\u952e\u53ef\u4ee5\u62d6\u52a8\u955c\u5934\uff0c\u4f7f\u7528\u9f20\u6807\u6eda\u8f6e\u53ef\u4ee5\u8fdb\u884c\u7f29\u653e\u3002</li> <li>\u5728\u5207\u6362\u5730\u56fe\u5927\u5c0f\u65f6\uff0c\u955c\u5934\u4f1a\u81ea\u52a8\u56de\u5230\u521d\u59cb\u4f4d\u7f6e\u5e76\u8c03\u6574\u5230\u5408\u9002\u7684\u5927\u5c0f\u3002</li> </ul>"},{"location":"player/pacman/#_4","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"player/pacman/#_5","title":"\u56de\u653e\u6a21\u5f0f","text":"<ul> <li>\u4f7f\u7528\u4e0b\u65b9\u7684\u6309\u94ae\u53ef\u4ee5\u63a7\u5236\u56de\u653e\u7684\u76f8\u5173\u53c2\u6570\u3002<ul> <li><code>&lt;</code>\uff1a\u56de\u5230\u4e0a\u4e00\u56de\u5408</li> <li><code>&gt;</code>\uff1a\u524d\u8fdb\u5230\u4e0b\u4e00\u56de\u5408</li> <li>\u64ad\u653e\u6309\u94ae\uff1a\u5f00\u59cb/\u6682\u505c\u81ea\u52a8\u64ad\u653e</li> <li><code>x2</code>\uff1a\u8c03\u6574\u56de\u653e\u901f\u5ea6</li> </ul> </li> </ul>"},{"location":"player/pacman/#_6","title":"\u4ea4\u4e92\u6a21\u5f0f","text":"<ul> <li>\u4f7f\u7528\u952e\u76d8\u4e0a\u7684\u65b9\u5411\u952e <code>WASD</code>\u8fdb\u884c\u4e92\u52a8\uff0c\u4f7f\u7528<code>Enter</code>\u8fdb\u884c\u786e\u8ba4<ul> <li><code>W</code>\uff1a\u5411\u4e0a\u79fb\u52a8</li> <li><code>A</code>\uff1a\u5411\u5de6\u79fb\u52a8</li> <li><code>S</code>\uff1a\u5411\u4e0b\u79fb\u52a8</li> <li><code>D</code>\uff1a\u5411\u53f3\u79fb\u52a8</li> <li><code>Enter</code>\uff1a\u5728\u6309\u4e0b\u65b9\u5411\u952e\u540e\u786e\u8ba4\u79fb\u52a8</li> </ul> </li> <li>\u6bcf\u6b21\u6309\u4e0b\u65b9\u5411\u952e\u90fd\u4f1a\u7528\u7ea2\u8272\u663e\u793a\u79fb\u52a8\u540e\u7684\u4f4d\u7f6e</li> </ul>"},{"location":"player/pacman/#_7","title":"\u8bf4\u660e","text":"<p>\u5982\u679c\u672c\u6b21\u64cd\u4f5c\u4e0d\u5408\u6cd5\uff08\u5982\u649e\u5899\uff09\uff0c\u90a3\u4e48\u5403\u8c46\u4eba\u4e0d\u4f1a\u79fb\u52a8</p>"},{"location":"sdk_structure/pacman_sdk/","title":"Rollman SDK \u5f15\u5bfc","text":"<p>\u672c\u6587\u6863\u662fRollman\u548c\u5e7d\u7075\u7684 SDK \u4f7f\u7528\u8bf4\u660e</p> <p>Rollman SDK \u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/PacmanSDK-python</p> <p>\u5e7d\u7075 SDK \u4ed3\u5e93\uff1ahttps://github.com/PacMan-Logic/GhostsSDK-python</p>"},{"location":"sdk_structure/pacman_sdk/#sdk","title":"SDK\u7684\u4e0b\u8f7d\u53ca\u914d\u7f6e","text":"<ol> <li>\u5b89\u88c5\u5e76\u914d\u7f6egit</li> <li>\u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u5230\u672c\u5730\uff08\u5728\u7ec8\u7aef\u8f93\u5165\uff09: <code>git clone &lt;repository_url&gt;</code></li> <li>\u914d\u7f6esdk\u4e2d\u7684core\uff08\u8fdb\u5165SDK\u6240\u5728\u76ee\u5f55\u5e76\u5728\u7ec8\u7aef\u8f93\u5165\uff09:  <code>git submodule init</code> <code>git submodule update</code></li> <li>\u540e\u7eed\u66f4\u65b0core\uff08\u5728\u7ec8\u7aef\u8f93\u5165\uff09: <code>git submodule update --remote core</code></li> </ol>"},{"location":"sdk_structure/pacman_sdk/#_1","title":"\u4ee3\u7801\u7ed3\u6784","text":"<p>SDK \u7531 GYM \u73af\u5883\u7c7b\u3001\u6e38\u620f\u63a7\u5236\u5668\u548c AI \u51fd\u6570\u7ec4\u6210\u3002</p>"},{"location":"sdk_structure/pacman_sdk/#_2","title":"\u5c40\u9762\u72b6\u6001\u4fe1\u606f\u8868\u793a\u65b9\u6cd5","text":"<p>\u4ee5\u5b57\u5178\u7c7b\u578b\u8868\u793a\u5f53\u524d\u5c40\u9762\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u5177\u4f53\u683c\u5f0f\u4e3a <pre><code>{\n    \"level\": self._level, # int \u8868\u793a\u5f53\u524d\u5173\u5361\n    \"round\": self._round, # int \u8868\u793a\u5f53\u524d\u8f6e\u6b21\n    \"board_size\": self._size, # int \u8868\u793a\u5f53\u524d\u5173\u5361\u68cb\u76d8\u5927\u5c0f\n    \"board\": self._board, # ndarray \u8868\u793a\u5f53\u524d\u5173\u5361\u68cb\u76d8\u5927\u5c0f\n    \"pacman_skill_status\": np.array(self._pacman.get_skills_status()), # ndarray \u8868\u793a\u5f53\u524d\u62e5\u6709\u7684\u6280\u80fd\n    \"pacman_coord\": self._pacman.get_coord(), # ndarray \u8868\u793a\u5377\u738b\u7684\u5750\u6807\n    \"ghosts_coord\": [ghost.get_coord() for ghost in self._ghosts], # ndarray \u8868\u793a\u5e7d\u7075\u7684\u5750\u6807\n    \"score\": [self._pacman_score, self._ghosts_score], # list \u8868\u793a\u5377\u738b\u548c\u5e7d\u7075\u7684\u5206\u6570\n    \"beannumber\": self._beannumber, # int \u8868\u793a\u5730\u56fe\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u8c46\u5b50\n    \"portal_available\": self._portal_available, # bool \u8868\u793a\u4f20\u9001\u95e8\u662f\u5426\u5f00\u542f\n    \"portal_coord\": self._portal_coord, # ndarray \u8868\u793a\u4f20\u9001\u95e8\u5750\u6807\n}\n</code></pre></p>"},{"location":"sdk_structure/pacman_sdk/#gym-pacmanenv","title":"GYM \u73af\u5883\u7c7b\uff08PacmanEnv\uff09","text":"<p>GYM \u73af\u5883\u7c7b\uff08PacmanEnv\uff09\u7ef4\u62a4\u4e86\u6e38\u620f\u5c40\u9762\u7684\u5168\u91cf\u4fe1\u606f\u4f9b AI \u8c03\u7528\u3002\u8be5\u7c7b\u63d0\u4f9b\u5982\u4e0b\u63a5\u53e3\uff1a</p>"},{"location":"sdk_structure/pacman_sdk/#reset","title":"reset","text":"<ul> <li> <p>Args: mode(string) \u4e3a\"logic\"\u6216\"local\"</p> </li> <li> <p>Returns: return_dict(dict)</p> </li> </ul> <p>reset \u51fd\u6570\u5728\u6bcf\u5173\u5f00\u59cb\u65f6\u88ab\u8c03\u7528\u3002\u73a9\u5bb6\u5c06\u8fdb\u5165\u4e00\u4e2a\u65b0\u7684\u5730\u56fe\uff0c\u5377\u738b\u548c\u4e09\u4e2a\u5e7d\u7075\u4f1a\u968f\u673a\u751f\u6210\u5728\u5730\u56fe\u7684\u56db\u4e2a\u89d2\u843d\u3002\u8be5\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5f53\u524d\u5c40\u9762\u72b6\u6001\u4fe1\u606f\u7684\u5b57\u5178\u3002</p> <p>\u5728 mode=\"local\" \u65f6\uff0c\u7b2c\u4e09\u5173\u7ed3\u675f\u540e\u5c06\u91cd\u7f6e\u5230\u7b2c\u4e00\u5173\uff0c\u4fbf\u4e8e\u6a21\u578b\u7684\u8bad\u7ec3\u3002</p>"},{"location":"sdk_structure/pacman_sdk/#ai_reset","title":"ai_reset","text":"<ul> <li>Args: dict(dict)</li> </ul> <p>\u5728\u68cb\u76d8\u6539\u53d8\u65f6\u89e3\u7801 judger \u53d1\u9001\u7684\u521d\u59cb\u5316\u4fe1\u606f\uff0c\u4fdd\u8bc1 ai \u7684 PacmanEnv \u73af\u5883\u7c7b\u4e0e\u540e\u7aef\u7684 PacmanEnv \u73af\u5883\u7c7b\u7684\u4e00\u81f4\u6027\u3002</p>"},{"location":"sdk_structure/pacman_sdk/#render","title":"render","text":"<ul> <li> <p>Args: mode(string) \u4e3a\"logic\"\u6216\"local\"</p> </li> <li> <p>Returns: return_dict(dict)</p> </li> </ul> <p>\u4f20\u5165 mode=\"local\" \u65f6\u53ef\u5728\u672c\u5730\u7ec8\u7aef\u751f\u6210\u5730\u56fe\uff0c\u4f9b\u9009\u624b\u8c03\u8bd5\u4f7f\u7528\u3002</p>"},{"location":"sdk_structure/pacman_sdk/#step","title":"step","text":"<ul> <li> <p>Args: pacmanAction(int), ghostAction(List[int])</p> </li> <li> <p>Returns: (return_dict(dict), pacman_reward(int), ghosts_reward(int), level_change(bool), eat_all_beans(bool)) \u5206\u522b\u4e3a\u5c40\u9762\u72b6\u6001\u4fe1\u606f\u3001\u5377\u738b\u5f53\u524d\u8f6e\u6b21\u7684\u52a0\u5206\u3001\u5e7d\u7075\u5f53\u524d\u8f6e\u6b21\u7684\u52a0\u5206\u3001\u662f\u5426\u5207\u6362\u5230\u4e0b\u4e00\u5173\u3001\u672c\u5173\u662f\u5426\u5403\u5b8c\u5168\u90e8\u7684\u8c46\u5b50</p> </li> </ul> <p>step \u51fd\u6570\u662f\u73af\u5883\u66f4\u65b0\u7684\u4e3b\u51fd\u6570\uff0c\u5904\u7406\u6e38\u620f\u903b\u8f91\uff0c\u6309\u7167\u9009\u624b\u7684\u8f93\u5165\u66f4\u65b0\u6e38\u620f\u72b6\u6001\u3002</p> <p>\u5177\u4f53\u903b\u8f91\u7684\u5b9e\u73b0\u8bf7\u53c2\u8003 sdk \u4e2d GymEnvironment.py \u4e2d\u7684\u6ce8\u91ca</p>"},{"location":"sdk_structure/pacman_sdk/#controller","title":"\u6e38\u620f\u63a7\u5236\u5668\uff08Controller\uff09","text":""},{"location":"sdk_structure/pacman_sdk/#_3","title":"\u521d\u59cb\u5316","text":"<p>\u521d\u59cb\u5316\u65f6 judger \u5411 0 \u53f7\u73a9\u5bb6\u53d1\u9001\u5b57\u7b26\u4e32\"0\"\uff0c\u5411 1 \u53f7\u73a9\u5bb6\u53d1\u9001\u5b57\u7b26\u4e32\"1\"\uff0c0 \u53f7\u73a9\u5bb6\u5148\u53d1\u9001\u64cd\u4f5c\u6d88\u606f\uff0c1 \u53f7\u73a9\u5bb6\u540e\u53d1\u9001\u64cd\u4f5c\u6d88\u606f\u3002</p>"},{"location":"sdk_structure/pacman_sdk/#run","title":"run","text":"<p>run \u51fd\u6570\u9996\u5148\u5224\u65ad\u662f\u5426\u8fdb\u5165\u65b0\u7684 level\uff0c\u82e5\u8fdb\u5165\u65b0\u7684 level \u5219\u8bfb\u53d6 judger \u4f20\u6765\u7684\u521d\u59cb\u5316\u4fe1\u606f\u5e76\u5b9e\u4f8b\u5316\u6574\u5c40\u6e38\u620f\u552f\u4e00\u7684\u73af\u5883\u5b9e\u4f8b\u3002</p> <p>\u82e5\u5f53\u524d\u73a9\u5bb6\u4e3a0 \u53f7\u73a9\u5bb6\uff0c\u5219\u5148\u8c03\u7528\u4f20\u5165\u7684 ai \u51fd\u6570\uff0c\u5e76\u5c06 ai \u51fd\u6570\u8fd4\u56de\u7684\u64cd\u4f5c\u5e8f\u53f7\u4f20\u7ed9 judger</p> <pre><code>pacman_op(self.env,ai) # \u5f53\u524d\u73a9\u5bb6\u4e3a\u5377\u738b\uff0c\u5219ai\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u542b1\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\n</code></pre> <p>\u6216</p> <pre><code>ghosts_op(self.env,ai) # \u5f53\u524d\u73a9\u5bb6\u4e3a\u5e7d\u7075\uff0c\u5219ai\u8fd4\u56de\u4e00\u4e2a\u542b3\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\n</code></pre> <p>\u7136\u540e\u8bfb\u53d6\u5bf9\u65b9\u5df2\u7ecf\u64cd\u4f5c\u7684\u6d88\u606f</p> <pre><code>get_info = input() # \u5e76\u4e0d\u80fd\u8bfb\u53d6\u5230\u5bf9\u65b9\u64cd\u4f5c\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u53ea\u662f\u6807\u8bb0\u5bf9\u65b9\u5df2\u7ecf\u53d1\u9001\u64cd\u4f5c\n</code></pre> <p>\u6700\u540e\u8bfb\u53d6 judger \u4f20\u6765\u7684\u5e7d\u7075\u548c\u5377\u738b\u7684\u64cd\u4f5c\u4fe1\u606f\uff0c\u66f4\u65b0\u6574\u5c40\u6e38\u620f\u552f\u4e00\u7684\u73af\u5883\u5b9e\u4f8b\u3002</p> <p>\u82e5\u5f53\u524d\u73a9\u5bb6\u4e3a1 \u53f7\u73a9\u5bb6\uff0c\u5219\u5148\u8bfb\u53d6\u5bf9\u65b9\u5df2\u7ecf\u64cd\u4f5c\u7684\u6d88\u606f</p> <pre><code>get_info = input() # \u5e76\u4e0d\u80fd\u8bfb\u53d6\u5230\u5bf9\u65b9\u64cd\u4f5c\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u53ea\u662f\u6807\u8bb0\u5bf9\u65b9\u5df2\u7ecf\u53d1\u9001\u64cd\u4f5c\n</code></pre> <p>\u7136\u540e\u8c03\u7528\u4f20\u5165\u7684 ai \u51fd\u6570\uff0c\u5e76\u5c06 ai \u51fd\u6570\u8fd4\u56de\u7684\u64cd\u4f5c\u5e8f\u53f7\u4f20\u7ed9 judger</p> <pre><code>pacman_op(self.env,ai) # \u5f53\u524d\u73a9\u5bb6\u4e3a\u5377\u738b\uff0c\u5219ai\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u542b1\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\n</code></pre> <p>\u6216</p> <pre><code>ghosts_op(self.env,ai) # \u5f53\u524d\u73a9\u5bb6\u4e3a\u5e7d\u7075\uff0c\u5219ai\u8fd4\u56de\u4e00\u4e2a\u542b3\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\n</code></pre> <p>\u6700\u540e\u8bfb\u53d6 judger \u4f20\u6765\u7684\u5e7d\u7075\u548c\u5377\u738b\u7684\u64cd\u4f5c\u4fe1\u606f\uff0c\u66f4\u65b0\u6574\u5c40\u6e38\u620f\u552f\u4e00\u7684\u73af\u5883\u5b9e\u4f8b\u3002</p> <p>\u6ce8\u610f\u82e5 AI \u53d1\u9001\u4e86\u4e0d\u5408\u7406\u7684\u64cd\u4f5c\u53f7\uff08\u6bd4\u5982 5\u3001-1 \u7b49\uff09\u5219\u4f1a\u88ab\u89c6\u4e3a\u4e0d\u8fdb\u884c\u79fb\u52a8</p>"},{"location":"sdk_structure/pacman_sdk/#ai","title":"AI \u51fd\u6570","text":"<p>\u4e00\u4e2a\u8f93\u5165\u4e3a GameState \u7c7b\u5b9e\u4f8b\uff0c\u8f93\u51fa\u4e3a\u64cd\u4f5c\u6570\u7ec4\u7684\u51fd\u6570\u3002\u6ce8\u610f\uff0c\u8bf7\u4e0d\u8981\u5728\u51fd\u6570\u4e2d\u76f4\u63a5\u5bf9\u4f20\u5165\u7684\u73af\u5883\u5b9e\u4f8b\u4f5c\u4fee\u6539\u3002\u8bf7\u4f7f\u7528 deepcopy \u590d\u5236</p>"},{"location":"sdk_structure/pacman_sdk/#_4","title":"\u9009\u624b\u53ef\u83b7\u53d6\u7684\u5185\u5bb9\u53ca\u83b7\u53d6\u65b9\u5f0f","text":""},{"location":"sdk_structure/pacman_sdk/#_5","title":"\u83b7\u53d6\u5173\u5361\u53f7","text":"<pre><code>gamestate.level\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u5173\u5361\u53f7</p>"},{"location":"sdk_structure/pacman_sdk/#_6","title":"\u83b7\u53d6\u8f6e\u6570","text":"<pre><code>gamestate.round\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u5173\u5361\u8fdb\u884c\u5230\u7684\u8f6e\u6570</p>"},{"location":"sdk_structure/pacman_sdk/#_7","title":"\u83b7\u53d6\u68cb\u76d8\u76f8\u5173\u4fe1\u606f","text":"<pre><code>gamestate.board_size\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u68cb\u76d8\u5927\u5c0f</p> <pre><code>gamestate.board\n</code></pre> <p>\u4e3a<code>np.ndarray</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u68cb\u76d8\uff0c\u68cb\u76d8\u4e2d\u5143\u7d20</p> <pre><code>0\u4ee3\u8868\u5899\n1\u4ee3\u8868\u7a7a\u5730\n2\u4ee3\u8868\u77e5\u8bc6\u91d1\u5e01\n3\u4ee3\u8868\u53cc\u500d\u8363\u8000\u5e01\n4\u4ee3\u8868\u75be\u98ce\u4e4b\u7ffc\n5\u4ee3\u8868\u667a\u5f15\u78c1\u77f3\n6\u4ee3\u8868\u62a4\u5b66\u4e4b\u76fe\n7\u4ee3\u8868\u667a\u6167\u5723\u5178\n8\u4ee3\u8868\u4f20\u9001\u95e8\n</code></pre> <pre><code>gamestate.beannumber\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u68cb\u76d8\u7684\u603b\u8c46\u5b50\u6570</p>"},{"location":"sdk_structure/pacman_sdk/#_8","title":"\u83b7\u53d6\u5377\u738b\u76f8\u5173\u4fe1\u606f","text":"<pre><code>gamestate.pacman_skill_status\n</code></pre> <p>\u4e3a<code>list[int]</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5377\u738b\u5f53\u524d\u62e5\u6709\u7684\u6280\u80fd\uff0c\u6570\u7ec4\u5171 4 \u4e2a\u5143\u7d20\uff0c\u5206\u522b\u8868\u793aDOUBLE_SCORE \u6280\u80fd\u3001SPEED_UP \u6280\u80fd\u3001MAGNET \u6280\u80fd\u7684\u5269\u4f59\u8f6e\u6570\u548c\u5f53\u524d\u62e5\u6709\u7684 SHIELD \u7684\u6570\u91cf</p> <pre><code>gamestate.pacman_pos\n</code></pre> <p>\u4e3a<code>np.ndarray[int]</code>\u7c7b\u578b\u7684\u503c</p> <p>\u957f\u5ea6\u4e3a 2\uff0c <code>gamestate.pacman_pos[0]</code> \u548c <code>gamestate.pacman_pos[1]</code> \u5206\u522b\u8868\u793a\u5377\u738b\u7684\u6a2a\u7eb5\u5750\u6807</p> <pre><code>gamestate.pacman_score\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u5377\u738b\u7684\u5f97\u5206</p>"},{"location":"sdk_structure/pacman_sdk/#_9","title":"\u83b7\u53d6\u5e7d\u7075\u76f8\u5173\u4fe1\u606f","text":"<pre><code>gamestate.ghosts_pos\n</code></pre> <p>\u4e3a<code>list[np.ndarray[int]]</code>\u7c7b\u578b\u7684\u503c</p> <p>\u957f\u5ea6\u4e3a 3\uff0c\u8868\u793a\u4e09\u4e2a\u5e7d\u7075\u7684\u5750\u6807</p> <pre><code>gamestate.ghosts_score\n</code></pre> <p>\u4e3a<code>int</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u5e7d\u7075\u7684\u5f97\u5206</p>"},{"location":"sdk_structure/pacman_sdk/#_10","title":"\u83b7\u53d6\u4f20\u9001\u95e8\u76f8\u5173\u4fe1\u606f","text":"<pre><code>gamestate.portal_available\n</code></pre> <p>\u4e3a<code>bool</code>\u7c7b\u578b\u7684\u503c</p> <p>\u8868\u793a\u5f53\u524d\u4f20\u9001\u95e8\u662f\u5426\u5f00\u542f</p> <pre><code>gamestate.portal_coord\n</code></pre> <p>\u4e3a<code>np.ndarray[int]</code>\u7c7b\u578b\u7684\u503c</p> <p>\u957f\u5ea6\u4e3a 2\uff0c <code>gamestate.portal_coord[0]</code> \u548c <code>gamestate.portal_coord[1]</code> \u5206\u522b\u8868\u793a\u4f20\u9001\u95e8\u7684\u6a2a\u7eb5\u5750\u6807</p>"},{"location":"sdk_structure/pacman_sdk/#_11","title":"\u83b7\u53d6\u7a7a\u95f4\u4fe1\u606f","text":"<pre><code>gamestate.space_info\n</code></pre> <p>\u4e3a<code>dict</code>\u7c7b\u578b\u7684\u503c</p> <p>\u5305\u542b<code>observation_space</code>\u3001<code>pacman_action_space</code>\u3001<code>ghost_action_space</code>\u4e09\u4e2a\u952e\uff0c\u5206\u522b\u8868\u793a\u7a7a\u95f4\u7684\u89c2\u5bdf\u7a7a\u95f4\u3001\u5377\u738b\u7684\u52a8\u4f5c\u7a7a\u95f4\u548c\u5e7d\u7075\u7684\u52a8\u4f5c\u7a7a\u95f4</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>{\n    \"observation_space\": spaces.MultiDiscrete(np.ones((20, 20)) * SPACE_CATEGORY),\n    \"pacman_action_space\": spaces.Discrete(5),\n    \"ghost_action_space\": spaces.MultiDiscrete(np.ones(3) * 5)\n}\n</code></pre>"},{"location":"sdk_structure/pacman_sdk/#gamestate","title":"\u628aGameState\u7c7b\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u5c40\u9762\u72b6\u6001\u4fe1\u606f\u5b57\u5178","text":"<p><pre><code>gamestate.gamestate_to_statedict()\n</code></pre> \u8fd4\u56de<code>dict</code>\u7c7b\u578b\u7684\u503c\uff0c\u4e3a\u5c40\u9762\u72b6\u6001\u4fe1\u606f\u5b57\u5178</p>"},{"location":"sdk_structure/sdk/","title":"SDK\u4f7f\u7528\u6307\u5357","text":"<p>\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecdSDK\u901a\u5e38\u7684\u7ed3\u6784\uff0c\u4ee5\u53ca\u9009\u624b\u5e94\u5982\u4f55\u4f7f\u7528\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684SDK</p>"},{"location":"sdk_structure/sdk/#sdk_1","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528SDK\uff1f","text":"<p>\u56de\u987e\u4eba\u5de5\u667a\u80fd\u9886\u57df\u4e2d\u667a\u80fd\u4f53\u7684\u5b9a\u4e49\uff1a\u80fd\u591f\u4e0e\u73af\u5883\u4ea4\u4e92\u5e76\u4f5c\u51fa\u51b3\u7b56\u3002\u5982\u679c\u80fd\u591f\u5c06\u73af\u5883\u548c\u4ea4\u4e92\u62bd\u8c61\u6210\u63a5\u53e3\uff0c\u5f00\u53d1\u8005\u5c31\u4ec5\u9700\u8981\u8003\u8651\u51b3\u7b56\u8fc7\u7a0b\u7684\u5b9e\u73b0\uff0c\u8fd9\u53ef\u4ee5\u5927\u5927\u51cf\u8f7b\u5f00\u53d1\u8005\u7684\u8d1f\u62c5\u3002\u667a\u80fd\u4f53\u5927\u8d5b\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684SDK\u5c31\u5b9e\u73b0\u4e86\u57fa\u7840\u7684\u73af\u5883\u548c\u4ea4\u4e92\u8fc7\u7a0b\u7684\u62bd\u8c61\uff0c\u540c\u65f6\u53ef\u80fd\u63d0\u4f9b\u4e00\u4e9b\u53ef\u89c6\u5316\u548c\u8c03\u8bd5\u5de5\u5177\u3002</p>"},{"location":"sdk_structure/sdk/#sdk_2","title":"SDK\u5e38\u89c1\u7ed3\u6784","text":""},{"location":"sdk_structure/sdk/#_1","title":"\u6e38\u620f\u72b6\u6001\u7c7b","text":"<p>\u6e38\u620f\u72b6\u6001\u7c7b\u662f\u73af\u5883\u7684\u6838\u5fc3\u7c7b\u3002\u6e38\u620f\u72b6\u6001\u7c7b\u5305\u542b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u73af\u5883\u3002\u4f8b\u5982\uff0c\u5728\u56f4\u68cb\u6e38\u620f\u4e2d\uff0c\u6e38\u620f\u72b6\u6001\u7c7b\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u3002\u4e3a\u4e86\u65b9\u4fbf\u7ef4\u62a4\uff0c\u6e38\u620f\u72b6\u6001\u7c7b\u53ef\u80fd\u8fd8\u4f1a\u7ef4\u62a4\u91cd\u590d\u7684\u4fe1\u606f\u3002\u6e38\u620f\u72b6\u6001\u7c7b\u901a\u5e38\u5bf9\u9009\u624b\u66b4\u9732\u67e5\u8be2\u63a5\u53e3\uff0c\u4f8b\u5982\u9009\u624b\u53ef\u4ee5\u4f7f\u7528\u67e5\u8be2\u51fd\u6570\u67e5\u8be2\u68cb\u76d8\u4e0a\u7684\u67d0\u4e2a\u70b9\u7684\u843d\u5b50\u60c5\u51b5\u3001\u843d\u5b50\u7684\u6b65\u6570\u3001\u5269\u4f59\u7684\u6c14\u7b49\u4fe1\u606f\u3002</p>"},{"location":"sdk_structure/sdk/#_2","title":"\u72b6\u6001\u7ef4\u62a4\u51fd\u6570","text":"<p>\u72b6\u6001\u7ef4\u62a4\u51fd\u6570\u8d1f\u8d23\u5728\u667a\u80fd\u4f53\u8fdb\u884c\u64cd\u4f5c\u540e\u7ef4\u62a4\u6e38\u620f\u72b6\u6001\u3002\u8fd9\u4fdd\u8bc1\u4e86\u6e38\u620f\u72b6\u6001\u7684\u5b9e\u65f6\u6027\u548c\u6b63\u786e\u6027\u3002\u4f8b\u5982\uff0c\u5728\u56f4\u68cb\u6e38\u620f\u4e2d\uff0c\u667a\u80fd\u4f53\u843d\u5b50\u540e\u3002\u72b6\u6001\u7ef4\u62a4\u51fd\u6570\u5c06\u4fee\u6539\u4e8c\u7ef4\u6570\u7ec4\u5bf9\u5e94\u4f4d\u7f6e\u5904\u7684\u503c\uff0c\u4fdd\u8bc1\u843d\u5b50\u60c5\u51b5\u3001\u843d\u5b50\u6b65\u6570\u7b49\u4fe1\u606f\u7684\u53d8\u5316\u88ab\u66f4\u65b0\u5230\u73af\u5883\u4e2d\u3002</p>"},{"location":"sdk_structure/sdk/#_3","title":"\u5b8c\u5907\u7684\u4ea4\u4e92\u73af\u5883","text":"<p>\u72b6\u6001\u7ef4\u62a4\u51fd\u6570\u548c\u6e38\u620f\u72b6\u6001\u7c7b\u6784\u6210\u4e86\u4e00\u4e2a\u5b8c\u5907\u7684\u4ea4\u4e92\u73af\u5883\u3002\u667a\u80fd\u4f53\u5728\u4f5c\u51fa\u51b3\u7b56\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u72b6\u6001\u7ef4\u62a4\u51fd\u6570\u4f7f\u7528\u51b3\u7b56\u5bf9\u73af\u5883\u65bd\u52a0\u5f71\u54cd\uff0c\u5e76\u901a\u8fc7\u6e38\u620f\u72b6\u6001\u7c7b\u7684\u67e5\u8be2\u63a5\u53e3\u5bf9\u73af\u5883\u8fdb\u884c\u89c2\u6d4b\uff0c\u8fdb\u800c\u505a\u51fa\u4e0b\u4e00\u6b65\u51b3\u7b56\u3002</p>"},{"location":"sdk_structure/sdk/#_4","title":"\u64cd\u4f5c\u7c7b","text":"<p>\u64cd\u4f5c\u7c7b\u662f\u51b3\u7b56\u7684\u518d\u6b21\u5c01\u88c5\u3002\u667a\u80fd\u4f53\u6240\u4f5c\u51fa\u7684\u4e00\u4e2a\u51b3\u7b56\u53ef\u80fd\u9700\u8981\u5927\u91cf\u4fe1\u606f\u8fdb\u884c\u63cf\u8ff0\u3002\u64cd\u4f5c\u7c7b\u63d0\u4f9b\u4e86\u51b3\u7b56\u7684\u5c01\u88c5\uff0c\u9009\u624b\u7684\u51b3\u7b56\u903b\u8f91\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u7c7b\u7684\u5b9e\u4f8b\u63cf\u8ff0\u4f5c\u51fa\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u6570\u7ec4<code>[a, b]</code>\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u56f4\u68cb\u6e38\u620f\u4e2d\u7684\u4e00\u4e2a\u64cd\u4f5c\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86\u5728\u68cb\u76d8\u7684a\u884cb\u5217\u843d\u5b50\u7684\u64cd\u4f5c\u3002\u5728\u66f4\u590d\u6742\u7684\u6e38\u620f\u4e2d\uff0c\u6240\u9700\u8981\u7684\u53c2\u6570\u53ef\u80fd\u66f4\u591a\uff0c\u6b64\u65f6\u7684\u5c01\u88c5\u4f1a\u663e\u5f97\u66f4\u52a0\u5fc5\u8981\uff0c\u8fd9\u4f7f\u5f97\u9009\u624b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u64cd\u4f5c\u7c7b\u4e0e\u73af\u5883\u8fdb\u884c\u4ea4\u4e92\uff0c\u5728\u53c2\u6570\u4f20\u9012\u7684\u65f6\u5019\u66f4\u4e3a\u65b9\u4fbf\u3002</p>"},{"location":"sdk_structure/sdk/#_5","title":"\u6e38\u620f\u63a7\u5236\u5668","text":"<p>\u7531\u4e8e\u5728\u7ebf\u8bc4\u6d4b\u7684\u7279\u6027\uff0c\u667a\u80fd\u4f53\u9700\u8981\u5728\u5408\u9002\u7684\u65f6\u95f4\u544a\u77e5\u8bc4\u6d4b\u673a\u5f53\u524d\u7684\u51b3\u7b56\u3002\u4e3a\u4e86\u907f\u514d\u9009\u624b\u8fdb\u884c\u4ea4\u4e92\u65b9\u9762\u7684\u5f00\u53d1\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u6e38\u620f\u63a7\u5236\u5668\u3002\u6e38\u620f\u63a7\u5236\u5668\u7684\u5f15\u5165\u4f7f\u5f97\u9009\u624b\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u76f4\u63a5\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u6e38\u620f\u63a7\u5236\u5668\u5728\u9002\u5f53\u7684\u65f6\u95f4\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5e76\u7b49\u5f85\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u64cd\u4f5c\u7c7b\u3002\u56e0\u6b64\u9009\u624b\u65e0\u9700\u5173\u5fc3\u901a\u8baf\u7684\u5177\u4f53\u5b9e\u73b0\u548c\u65f6\u673a\uff0c\u5728\u6e38\u620f\u63a7\u5236\u5668\u901a\u77e5\u667a\u80fd\u4f53\u8fdb\u884c\u51b3\u7b56\u65f6\u76f4\u63a5\u8fd4\u56de\u51b3\u7b56\u5373\u53ef\u3002\u901a\u5e38\uff0c\u6e38\u620f\u5c40\u9762\u662f\u6e38\u620f\u63a7\u5236\u5668\u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u8d1f\u8d23\u7ef4\u62a4\u5f53\u524d\u5c40\u9762\uff0c\u4ee5\u4fbf\u4e8e\u548c\u9009\u624b\u53ef\u80fd\u5728\u6a21\u62df\u9636\u6bb5\u4f7f\u7528\u7684\u5176\u4ed6\u6e38\u620f\u5c40\u9762\u7c7b\u505a\u533a\u5206\u3002</p>"},{"location":"sdk_structure/sdk/#_6","title":"\u683c\u5f0f\u5316\u4e0e\u901a\u4fe1\u6a21\u5757","text":"<p>\u8fd9\u4e2a\u6a21\u5757\u8d1f\u8d23\u5c06\u667a\u80fd\u4f53\u8fd4\u56de\u7684\u64cd\u4f5c\u7c7b\u8f6c\u5316\u4e3a\u7b26\u5408\u901a\u4fe1\u534f\u8bae\u7684\u5b57\u8282\u6d41\uff0c\u4ee5\u53ca\u5c06\u8bc4\u6d4b\u673a\u7684\u5b57\u8282\u6d41\u8f6c\u5316\u4e3a\u64cd\u4f5c\u7c7b\u6216\u66f4\u65b0\u4fe1\u606f\u8fdb\u884c\u5c40\u9762\u66f4\u65b0\u6216\u76f4\u63a5\u544a\u77e5\u667a\u80fd\u4f53\u3002</p>"},{"location":"sdk_structure/sdk/#sdk_3","title":"\u4e00\u4e2a\u5178\u578b\u7684\u4f7f\u7528sdk\u7684\u667a\u80fd\u4f53\u5b9e\u73b0","text":"<ul> <li> <p>ai.py <pre><code>from sdk.gamestate import GameState\nfrom sdk.operations import *\n\ndef ai(state: Gamestate):\n    my_seat = state.seat\n    '''\n    \u8fdb\u884c\u51b3\u7b56\n    \u7b56\u7565\u4e3a\u5728\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u7684\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u843d\u5b50\n    '''\n    for a in range(19):\n        for b in range(19):\n            if state.check_chess_type(row=a, col=b) == -1:\n                return Step(row=a, col=b)\n</code></pre></p> </li> <li> <p>main.py <pre><code>from sdk.controller import GameController\nfrom ai import ai\n\nif __name__ == \"__main__\":\n    controller = GameController()\n    controller.init()\n    controller.start_game(ai)\n</code></pre></p> </li> </ul>"},{"location":"sdk_structure/sdk/#openai-gym-package","title":"OpenAI GYM Package","text":""},{"location":"sdk_structure/test_race_sdk/","title":"\u70ed\u8eab\u8d5bSDK\u5f15\u5bfc","text":"<p>\u672c\u6587\u6863\u662f\u70ed\u8eab\u8d5b\uff08\u5f00\u5fc3\u6d88\u6d88\u4e50\uff09\u7684SDK\u4f7f\u7528\u8bf4\u660e</p>"},{"location":"sdk_structure/test_race_sdk/#_1","title":"\u4ee3\u7801\u7ed3\u6784","text":"<p>SDK\u7531GYM\u73af\u5883\u7c7b\u3001AI\u51fd\u6570\u548c\u6e38\u620f\u63a7\u5236\u5668\u7ec4\u6210\u3002</p>"},{"location":"sdk_structure/test_race_sdk/#gym","title":"GYM\u73af\u5883\u7c7b","text":"<p>GYM\u73af\u5883\u7c7b\u7ef4\u62a4\u4e86\u6e38\u620f\u5c40\u9762\u7684\u5168\u91cf\u4fe1\u606f\u3002\u8be5\u7c7b\u63d0\u4f9b\u5982\u4e0b\u63a5\u53e3\uff1a</p>"},{"location":"sdk_structure/test_race_sdk/#reset","title":"reset","text":"<ul> <li> <p>Args</p> <ul> <li>seed (int, optional): \u73af\u5883\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u968f\u673a\u79cd\u5b50\u3002\u548c\u64cd\u4f5c\u5171\u540c\u5b8c\u5168\u51b3\u5b9a\u5c40\u9762\u7684\u8f6c\u79fb. Defaults to None.</li> <li>board (numpy.ndarray, optional): \u521d\u59cb\u68cb\u76d8\u3002\u4e00\u822c\u4e0d\u4f7f\u7528. Defaults to None.</li> </ul> </li> <li> <p>Returns:</p> <ul> <li>numpy.ndarray: \u8fd4\u56de\u521d\u59cb\u5316\u540e\u7684\u68cb\u76d8</li> </ul> </li> </ul>"},{"location":"sdk_structure/test_race_sdk/#step","title":"step","text":"<ul> <li> <p>Args:</p> <ul> <li>action (int): \u64cd\u4f5c\u7684\u5e8f\u53f7\u3002\u53ef\u4ee5\u7531coord_to_num\u65b9\u6cd5\u4ece\u5750\u6807\u8f6c\u6362\u5f97\u5230\u3002\u64cd\u4f5c\u5e8f\u53f7\u7684\u5b9a\u4e49\u89c1\u4e0b\u6587\u3002</li> <li>player (int, optional): \u8fdb\u884c\u64cd\u4f5c\u7684\u73a9\u5bb6\u5e8f\u53f7. Defaults to 0.</li> </ul> </li> <li> <p>Returns:</p> <ul> <li>tuple[np.ndarray, int, bool]: \u5206\u522b\u4e3a\u5c40\u9762\u3001\u5f53\u6b21\u64cd\u4f5c\u7684reward\u4ee5\u53ca\u6e38\u620f\u662f\u5426\u7ed3\u675f</li> </ul> </li> </ul>"},{"location":"sdk_structure/test_race_sdk/#observe","title":"observe","text":"<p>\u65e0\u53c2\u6570\u3002\u6839\u636erender_mode\u51b3\u5b9a\u8f93\u51fa\u3002\u672c\u5730\u4f7f\u7528\u65f6\u5c06render_mode\u8bbe\u7f6e\u4e3a<code>'local'</code>\uff0c\u5728\u8c03\u7528\u540e\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u6253\u5370\u5f53\u524d\u5c40\u9762\u3002</p>"},{"location":"sdk_structure/test_race_sdk/#num_to_coord-coord_to_num","title":"num_to_coord \u548ccoord_to_num","text":"<p>\u5206\u522b\u4e3a\u5c06\u64cd\u4f5c\u5e8f\u53f7\u8f6c\u6362\u4e3a\u5750\u6807\uff0c\u548c\u5c06\u5750\u6807\u8f6c\u6362\u4e3a\u64cd\u4f5c\u5e8f\u53f7\u3002 \u64cd\u4f5c\u5750\u6807\u7684\u5b9a\u4e49\u4e3a\uff1a<code>[x1, y1, x2, y2]</code>\u4ee3\u8868\u4ea4\u6362\u5750\u6807<code>[x1, y1]</code>\u548c<code>[x2, y2]</code>\u7684\u5757\u3002 \u64cd\u4f5c\u5e8f\u53f7\u5b9a\u4e49\u4e3a \\(y_2 + x_2 \\times size + y_1 \\times size^2 + x_1 \\times size^3\\)</p>"},{"location":"sdk_structure/test_race_sdk/#controller","title":"Controller","text":"<p>\u5728\u521d\u59cb\u5316\u65f6\u8bfb\u53d6judger\u4f20\u6765\u7684\u521d\u59cb\u5316\u4fe1\u606f\u5e76\u5b9e\u4f8b\u5316\u6574\u5c40\u6e38\u620f\u552f\u4e00\u7684\u73af\u5883\u5b9e\u4f8b\u3002run\u5c06\u8c03\u7528\u4f20\u5165\u7684ai\u51fd\u6570\uff0c\u5e76\u5c06ai\u51fd\u6570\u8fd4\u56de\u7684\u64cd\u4f5c\u5e8f\u53f7\u4f20\u7ed9judger\uff0c\u5e76\u8bfb\u53d6\u5bf9\u65b9\u64cd\u4f5c\u3002</p>"},{"location":"sdk_structure/test_race_sdk/#ai","title":"AI\u51fd\u6570","text":"<p>\u4e00\u4e2a\u8f93\u5165\u4e3aGYM\u73af\u5883\u7c7b\u5b9e\u4f8b\uff0c\u8f93\u51fa\u4e3a\u64cd\u4f5c\u5e8f\u53f7\u7684\u51fd\u6570\u3002\u6ce8\u610f\uff0c\u8bf7\u4e0d\u8981\u5728\u51fd\u6570\u4e2d\u76f4\u63a5\u5bf9\u4f20\u5165\u7684\u73af\u5883\u5b9e\u4f8b\u4f5c\u4fee\u6539\u3002\u8bf7\u4f7f\u7528deepcopy\u590d\u5236</p>"}]}